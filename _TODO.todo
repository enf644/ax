REFACTORING ROUND ONE:
	Переделать Workflow constructor:
		✔ Дорабатываем демо @done(19-02-04 10:29)
			✔ ++++ Повторить демо локально - https://gist.github.com/davidmr001/1e9e9d619d5cbbe6f1170b57990d1e0f @done(19-02-04 10:29)
			✔ ++++ Прямоугольники, вместо кругляшков @done(19-02-04 10:29)
			✔ ++++ Действия указывают на границу прямоугольников - https://stackoverflow.com/questions/13165913/draw-an-arrow-between-two-circles/20909533#20909533 @done(19-02-04 10:29)
				✔ https://math.stackexchange.com/questions/2397682/intersection-between-rectangle-and-line-from-center-point @done(19-02-04 10:29)
				✔ https://math.stackexchange.com/questions/625266/find-collision-point-between-vector-and-fencing-rectangle @done(19-02-04 10:29)
			✔ ++++ Повторить демо локально Drag-navigate - https://bl.ocks.org/mbostock/6123708 @done(19-02-04 10:29)
				✔ ++++ Прямоугольники вместо кругов @done(19-02-04 10:29)
			✔ ++++ Создание Прямоугольников @done(19-02-04 10:29)
			✔ ++++ Сделать выгнутые связи, сделать красивыми @done(19-02-04 10:29)
			✔ ++++ Zoom @done(19-02-04 10:29)
			✔ ++++ Названия в действии @done(19-02-04 10:29)
			✔ ++++ Создание связей @done(19-02-04 10:29)
				✔ ++++ Drag правой мышки = линия к мыши @done(19-02-04 10:29)
				✔ ++++ Drop = создание action @done(19-02-04 10:29)
			✔ ++++ Drag action = меняем radius @done(19-02-04 10:29)
			✔ ++++ Действие само на себя @done(19-02-04 10:29)
				✔ ++++ Вывод ссылок на действия обновления @done(19-02-04 10:29)
			✔ ++++ подсветка при наведении @done(19-02-04 10:29)
				✔ ++++ Действие @done(19-02-04 10:29)
				✔ ++++ Действие на себя @done(19-02-04 10:29)
			✔ ++++ Объект начала @done(19-02-04 10:29)
			✔ ++++ Объект конца @done(19-02-04 10:29)
			✔ ++++ Объект All @done(19-02-04 10:29)
			✔ ++++ Удаление при наведении и нажатии Del @done(19-02-04 10:29)
				✔ ++++ Статус @done(19-02-04 10:29)
				✔ ++++ Действие @done(19-02-04 10:29)
				✔ ++++ Действие на себя @done(19-02-04 10:29)
	Инфраструктура:
		Делаем заготовочку:
			✔ ++++ Flask приложение: @done(19-02-04 10:54)
				✔ ++++ Все тянем через requirements @done(19-02-04 10:48)
				✔ ++++ Flask skeleton @done(19-02-04 10:48)
			✔ ++++ npm зависимости - автоматическая загрузка @done(19-02-04 10:29)
			✔ ++++ Git - подключить репозиторий @done(19-02-04 10:29)
			✔ ++++ vue.js @done(19-02-04 10:29)
				✔ ++++ Run cli serve @done(19-02-04 10:29)
				✔ ++++ hello world @done(19-02-04 10:29)
				✔ ++++ Несколько вложенных модулей @done(19-02-04 10:29)
				✔ ++++ Routing - система страниц @done(19-02-04 10:29)
				✔ ++++ Axios - Ajax @done(19-02-04 10:29)
			✔ ++++ WebComponents @done(19-02-04 10:29)
				✔ ++++ Сделать пробный компонет ax-grid (https://github.com/vuejs/vue-web-component-wrapper, https://github.com/karol-f/vue-custom-element) @done(19-02-04 10:29)
			✔ GraphQL @done(19-02-04 14:44)
				✔ Сделать тестовую модель SQLAlchemy - https://github.com/Getmrahul/Flask-Graphene-SQLAlchemy @done(19-02-04 14:44)
			✔ Debug @done(19-02-04 19:30)
				✔ Python debugging @done(19-02-04 16:34)
				✔ Vue debugging @done(19-02-04 19:30)
			☐ Vuex / Redux
			☐ Webpack
				☐ Lazy loading
				☐ Частичная загрузка - отдельно форму, отдельно поля, отдельно грид, отдельно админку
			☐ SqlAlchemy
				☐ Sqllite DB
				☐ Dogpile Caching + Redis
			☐ Подключить https://www.codacy.com
			☐ UI Автотест - Cypress сделать пробный скрипт
			☐ Python unit-test - сделать и прогнать
			☐ Автодокументирование python кода
				☐ http://nevir.github.io/groc/index.html
				☐ https://gist.github.com/GLMeece/222624fc495caf6f3c010a8e26577d31
			☐ Автодокументирование vue.js кода
			☐ Общая документация
				☐ https://www.gitbook.com/?t=1
			☐ Интернационализация - выбор
		Авто-Деплой:
			☐ Сборка pip модуля, деплой в pypy
				☐ Как указывать куда ставить и по какому порту работать?
			☐ Деплой в Google App Engine
			☐ Деплой в App Engine через Market
			☐ Сборка docker image и деплой куда-то
			☐ Делаем инструкцию по настройке рабочего места
			☐ Настраиваем дополнительное рабочее место - Visual Studio
		Новые технологии:
			☐ https://swagger.io/
			☐ SqlAlchemy vesioning
				☐ https://alembic.sqlalchemy.org/en/latest/tutorial.html#create-a-migration-script
				☐ alembic revision --autogenerate -m "description of changes"
				☐ https://sqlalchemy-migrate.readthedocs.io/en/latest/
			☐ Очередь для выполнения импорта, действий процесса
				☐ https://www.fullstackpython.com/task-queues.html
				☐ Redis
			☐ Стухание сессии - блокировка экрана, предложение продолжить
			☐ Sockets.io
			☐ Oath - Авторизация
				☐ https://developer.okta.com/pricing/
			☐ Active directory - python
			☐ Markupsafe
			☐ Python Jenkins
				☐ https://github.com/paver/paver
				☐ https://www.fabfile.org/
		Открытые вопросы:
			☐ Подключение дополнительных полей - как?
			☐ Обновлеие версии - как?	Можно ли онлайн?
			☐ Продумать систему плагинов
			
AXY 20:
	☐ ADMIN INDEX
		☐ Полная структура навигации с всеми компонентами
		☐ from-constructor-drawer
		☐ form-constructor-create
	☐ FORM CONSTRUCTOR
		☐ form-constructor
			☐ form-constructor-tab
			☐ form-constructor-folder
			☐ form-constructor-options
	☐ AX-FORM
		☐ Переход на новую версию matrial-design
		☐ ax-string
		☐ ax-text
		☐ ax-id
		☐ ax-checkbox
		☐ ax-choise
	☐ GRID CONSTRUCTOR
		☐ Подключить новую версию Ag-grid FREE
		☐ Popup
			☐ https://github.com/vuetifyjs/vuetify/issues/1901
	☐ RELATION FIELDS
		☐ multiple pop-ups
		☐ ax-1tom
		☐ ax-mtom
		☐ ax-mtom-table
	☐ COMPLEX FIELDS
		☐ ax-files
		☐ ax-crop-image
	☐ USERS
		☐ Админ дает доступ пользователю или группе на Папку в списке объектов.
				☐ Если доступ есть - пользователь может в этой папке создавать объекты и менять уже созданные	
	☐ WORKFLOW
		☐ Структура БД
		☐ Страница с редактором
		☐ Пустая схема - Начало и Конец
		☐ Добавление статусов
		☐ Добавление действий
		☐ Уникальность названий статусов
		☐ Действие на само себя при создании статуса
		☐ Иконки в статусе и в действии
		☐ Добавление роли
			☐ Элемент списка ролей
			☐ Перетаскивание роли на статус и на действие - http://bl.ocks.org/thudfactor/6611441
		☐ Статус
			☐ Добавление
			☐ Редактирование
			☐ Удаление
		☐ Действие
			☐ Добавление
			☐ Редактирвоание
			☐ Удаление
		☐ Удалять все связанные действия при удалении статуса
		☐ Добавление роли на статус и действие
			☐ Добавление роли на стутус 
			☐ Добавление роли на действие
			☐ Подсветка статуса и действия при наведении на роль
				☐ списки action2role и state2role висят в компоненте и обновляются
                ☐ для каждого Статуса и каждого Действия - подсвечиваем нужным цветом
		☐ Опции Статуса - Выбор - доступные поля на статусе для каждой роли
		☐ Опции Действия
	☐ DASHBOARD
	☐ MARKETPLACE
		☐ Dump application to yaml
		☐ Install application from yaml



==============================================================================================


	Критерии работы экосистемы:
		☐ Файловая структура - Модель, Контроллер
		☐ Система билда - минификация, условная загрузка
		☐ Должна собираться и запускаться из pip или apk-get
			☐ Должна тянуть все зависимости через pip и npm - requirements.txt
			☐ Должна разворачиваться SQL Lite
		☐ Должна деплоится и работать на app-engine
		☐ Должен работать автодеплой внутри app-engine
		☐ Должна быть сгенерирована авто-документация по методам python
		☐ Должна быть сгенерирована авто-документация по компонентам Vue
		☐ Должны быть сформулированы behave сценарии тестирования
		☐ Должны быть развернуты версии для тестирования - 
			☐ Версия в appengine
			☐ Версия которая собирается через pip - SQLLite
			☐ Версия Docker с MySQL - ??
		☐ Должны прогоняться ui тесты согласно behave сценариям по всем развернутым версиям
		☐ Быстрая настройка рабочего места
			☐ Инструкция по конфигурированию рабочего места
			☐ Из гита тянем сорс, запускаем автоконфиг - тянутся все зависимости для рабочего места и все модули javascript
	☐ `Для каждого веб-елемента`
		☐ Переделать на Vue.js
		☐ Документирование 
		☐ Для каждого iron-ajax - on-error="..."
		☐ Интернационализация/локализация
		☐ Все комментарии на английском
		☐ Покрыть UI авто-тестом - https://www.katalon.com/katalon-studio/	https://medium.com/@briananderson2209/best-automation-testing-tools-for-2018-top-10-reviews-8a4a19f664d2
		☐ Соблюдать стиль - 
			☐ https://vuejs.org/v2/style-guide/
			☐ https://github.com/GoogleWebComponents/style-guide
	☐ `Для каждого метода в app.py`
		☐ Заполнить самодокументирование
		☐ Везде где есть входные переменные - проверять их наличие и значение
		☐ Покрыть код try-catch-finaly
		☐ Покрыть код with вместо open, close
		☐ Все SQL запросы беруться из справочника - проверяем на SQLLite и MySQL
		☐ Сделать unit-test
		☐ Соблюдать pep стиль
		☐ Прогнать статический анализ кода - https://blog.codacy.com/review-of-python-static-analysis-tools-ff8e7e27f972

		
============================================================================================


REFACTORING ROUND 2:
	☐ Отказоустойчивость
		☐ Мониторить пул соединений к Mysql - в случае проблем, перегружать приложение.
		☐ Система фиксации багов пользователями
AXY ON-PREMISE BETA RELEASE:
	☐ MARKETPLACE
		☐ Yaml vs SQl
	☐ РАЗРАБОТКА ПОЛЕЙ (60 полей)
	☐ Выкладывание в apt-get и pip
GETTING SERIOUS:
	☐ ПРИЧЕСКА и ПРОВЕРКИ
		☐ Admin только для админов
		☐ Тест - доступы распространяются на подгруппы
		☐ Убрать лишние файлы
	☐ Bower - перейти на latest версии всего
	☐ MYSQL - Быстродействие
		☐ Переделать все json поля на тип mysql JSON
		☐ Кэширвоание sqlalchemy самой структуры - Dogpile Caching
		☐ Динамическая загрузка скриптов - ????
	☐ Документирование
		☐ Актуализировать схему объектной модели
		☐ Нарисовать схему вызовов web_element -> route -> object (Подумать над автогенерацией)
	☐ Отказоустойчивость
		☐ Бэкапирование
		☐ При пропаже соединения в любом месте должны быть проверки и попытки пере-конекта. Таймер не-активности в системе - выбрасывать
		☐ Система мониторинга и устранения багов
	☐ Тестирование
		☐ BEHAVE - описать все сценарии
		☐ Организовать возможность оутстаф тестирования
	☐ Закрыть все висюки
	☐ Проверки
		☐ Вставка на удаленные страницы систем - google sites, sharepoint, bitrix
		☐ Проверка - медленное соединение
		☐ Проверка - Большой объем данных - Залить большой объем - https://github.com/datacharmer/test_db
		☐ Одновременная работа
			☐ Над объектом
			☐ Над гридом
			☐ Над процессом
			☐ Над записью
	☐ Авторизация - google, auth
		☐ Пользователь в grid server filter
		☐ Пользователь в action code			
	☐ Features
		☐ Проверка на ошибку выполнения действия - выводится на экран
		☐ Показывать - какие поля обязательны
		☐ Должно быть видно - какие поля можно редактировать
		☐ Изменение типа поля - можно только с одним db-type
		☐ Dashboard Menu Breadcrumbs
		☐ Dashboard Lazy-loading - iron-lazy-pages
		☐ Dashboard - message toasts
		☐ Grid - Inline edit - В зависимости от доступа, устанавливаем editable=true
		☐ Validate при inline edit
		☐ Избавится от Update. Это должно быть действие.
		☐ Поля с типами TEXT, BLOB грузятся через ajax, а не в момент запроса.
		☐ Toast в случае работы ax-grid вне axy.cloud
		☐ Динамический Title на всех страницах
	☐ Bugs
		☐ После установки приложения переходит не в то приложение


AXY SAAS BETA:
	☐ DEPLOY
		☐ Очередь вместо ajax запроса.
	☐ BACKEND
		☐ Сон и пробуждение неак��ивных контейнеров
	☐ Производительность и Масштабируемость
		☐ Отслеживание ресурсов сервера
		☐ Отслеживание открытых контейнеров
	☐ Инструкции для разработчиков
		☐ Как собрать приложение из git и запустить - pip, app get, git, bower, bower_installer
		☐ Как работает билд скрипт 
		☐ Как паблишить новую версию core и market
		☐ App Engine - логи, instances, versions
		☐ Как работает Axy.Market		
	☐ Сайт
		☐ Лендинг
		☐ Регистрация и вход клиента
		☐ Tutorial - анимированные шаги как инструкция
	☐ Бэк енд
		☐ Отслеживание оплаты
		☐ Отслеживание ��есурсов
		☐ Стратегия изменений
		☐ Выкладываение в Google Apps Market		
	☐ Tutorial
		☐ Form-constructor
		☐ Process-constructor
		☐ Grid-constructor
		☐ Dashboard-constuctor
		☐ Users
		☐ Axy-marketplace
	☐ ПРОЦЕССЫ
		☐ Условия
		☐ Действия по таймеру или условию		
	☐ PYTHON в действиях 
		☐ Autocomplete при написании кода
		☐ Debug
		☐ Log
	☐ Групповые действия
		☐ Исполнение онлайн или в очереди
	☐ AXY MARKETPLACE
		☐ Пользователи могут предлагать пред-настроенные Axy БД в виде дампа. За деньги или бесплатно.
		☐ Приложение это
			☐ SQL
			☐ web-elements полей
			☐ Серверные скрипты через pip
	☐ Features
		☐ Right-click menu in grid
		☐ Copy action
		☐ Export to excel




MID TODOS:
	☐ Тип поля в опциях в конструкторе форм
	☐ 1tom и mtom сделать уменьшающийся label при focus как в material design
	☐ Кастомные сортировки в зависимости от типа объекта (возможно часть назначения нового поля) http://ag-grid.com/angular-grid-sorting/index.php
	☐ CRUD -> JSONP - https://jvaneyck.wordpress.com/2014/01/07/cross-domain-requests-in-javascript/
	☐ Проверять работает ли MySQL
	☐ Автоматическое db_name
	☐ Убрать "example" в гриде и в форме
	☐ ax-files - очищать папки, которые не привязаны к записям (нажать создать, загрузить фото, но не сохранить запись)
	☐ При авторизации - Сохраняемый токен пользователя сейчас логин, а должен быть микс из логина и пароля.
	☐ Ограничение длинны названия статуса - 256 символов
	☐ Проверять везде служебные строки - ax_state, anon, id
	☐ Переделать close_modal и update. Сейчас грид обновляется только при закрытии. Нужно сделать отдельный сигнал на обновление гридов.
	☐ Анимация loading при обновлении грида и формы	
	☐ Везде одинаковые кнопки - либо MDL либо paper
	☐ Users-form - проверка в полях - email, пароль. Пароль нужно хешировать.
	☐ Ax-dashboard стиль для mdl-layout__container устанавливается таймером на 2000
	☐ Grid - в flat mode (forPrint) не работает сортировка
	☐ Process-constructor - Field Permission - кода выбираем "редактирование" на закладку, виртуальные поля должны простовляться "просмотр"
	☐ Ax-form - усли происходит переход с статуса на котором нет drawer на стутус с drawer - то drawer не показывается
	☐ Ag-grid - Inline edit - если значение не изменилось - не отправлять запрос
	☐ Ax-crop-image Field - не работает inline edit. Не ловится iron-signal в элементе editor
	☐ Toast при update в ax-grid
	☐ URL в dashboard - при перегрузке должна сохраняться открытая страница
	☐ Избавится от paper-card
	☐ Избавится от paper-drawer-panel
	☐ Избавится от config.py
	☐ Избавится от ax-core.css - или минимизировать
	☐ Market - deploy - Проверка безопасности - се��вис можно дернуть только из действия и только с этой системы.
	☐ Ax-action - spiiner при исполнении действия
	☐ Form-constructor - Сделать добавление поля по клику на тип поля
	☐ Constructor - если изменить settings формы, при переходе в грид-конструктор грид не обновляется
	☐ Ax-form - Update only fields that were modified on form submit
	☐ Ax-action Delete action must have confirm text on default!
	☐ Ax-from при выводе decimal переводится в float. Либо разобраться с сериализацией, либо заменить все поле на float
	☐ Деревья всегда открыты - Form, Grid, Dashboard constructor
	☐ Grid-constructor - Переделать выбор грида с option на jstree
	☐ Ax-grid - при добавлении строки группы не должны сворачиваться.
	☐ MtoM Table - один грид для отображения в форме, другой грид для поп-ап.
	☐ Form-constructor - при вводе db_name не должна быть возможность сохранить, если такое db_name уже есть.
	☐ Form-construcotr - emulate_screen при загрузке не работает. Если включить - drawer скрывается, но иконка-кнопка не показывается на больших формах.
	☐ Проверять установленные библиотеки при запуске приложения - https://stackoverflow.com/questions/16294819/how-to-check-if-my-python-has-all-required-packages
	☐ !!!!!!!!!!!!!!!! Переделать ax-form и все ajax сохранения, где может быть много текста на body. см. update_dashboard_item.
	☐ Разобраться с константами - everyone, anon, all_users и тд
	☐ Ревизия названия переменных
		☐ Максимально убрать ax_
		☐ object-construcotr -> form-constructor
		☐ process -> workflow


FEATURES:
	☐ Редактировать объект можно исключительно клавиатурой
	☐ Сообщение при создании - ИД созданной записи
	☐ Удаление нескольких объектов через правый клик 
	☐ Разные фильтры в гриде под разные типы данных - текст\число\дата
	☐ Логирование всех действий в админке
	☐ Features полей
		☐ MtoM
			☐ Settings - Максимальное количество элементотв
			☐ Удаление выбранных элементов в 1om_view
		☐ M:M Table
			☐ Добавление новой строчки при открытом mtom
			☐ При добавлении 1тоМ возможность указать default view
	☐ Список замещающих
	☐ Javascript в действиях - выполняется после выполнения действий на клиенте.
	☐ URL для совершения действия. Можно вставлять в письма из action.
	☐ Рядом с линком грида - счетчик строк в гриде (кол-во непрачитанных, кол-во всего)
	☐ Default tab at state settings - настройка в статусе - дефалтная закладка.
	☐ Form constructor - save entered values on form preview
	☐ Grid constructor - опции размера формы - эмуляция экрана
	☐ Grid constructor - опции modalSize
	☐ Если при загрузке grid options возникает exception - сбрасывать настройки на defaultные
	☐ Удаление колонки - дроп на drawer,	дроп на drawer для form constructor
	☐ Form constructor - поиск по типам полей
	☐ Ax-Field - 1toM - Связанные списки - выбераем один, ставится серверный фильтр на следующий. Тоже самое при изменении процесса - грид не обновляется.
	☐ Form-constuctor - выбор иконки плагином - https://farbelous.github.io/fontawesome-iconpicker/
	☐ Подсказка для ax-string
	☐ Сделать прямые стрелки для Action по умолчанию
	☐ Workflow editor - сделать Объект all. Если действие идет от алл - значит действие доступно на любом статусе.
	☐ Возможность использовать одну БД для авторизации пользователей в нескольких установках Axy (Несколько БД)
	☐ Наследование объектов. Объекты унаследованные от одного источника можно отображать в одном гриде.
	☐ В гриде можно отображать данные нескольких форм, если у них есть одинаковые поля.




PROBLEMS:
	☐ ++++ Если переименовать поле - слитают все view. Нужно перекликивать
	☐ ++++ Несколько гридов на странице
	☐ ++++ iron-ajax изменен! Нужно сделать свой элемент. Вроде для удаленного доступа. ret_url = "http://araxy-enf644.c9.io" + ret_url
	☐ Кэширование в IE10
	☐ escape string при Insert и update - сейчас тупа replace стоит
	☐ Сабмит в форме 2 раза
	☐ http://stackoverflow.com/questions/24956894/sql-alchemy-queuepool-limit-overflow
	☐ Во всех полях Polymer.IronValidatableBehavior не работает - все проверяется в ax-form вручную.
	☐ Form-constructor работатет на async с замедлением. Жесткой связи событий нет. МОжет не работать на медлен��ом соединении.
	☐ Process-constructor - может потеряться json go.js процесса!



ALL AX FIELDS:
	☐ Identification
		☐ Id
		☐ Numeration
	☐ Decoration
		☐ Header
		☐ Text
	☐ String
		☐ Simple String			++
		☐ Email
		☐ Static header
	☐ Number
		☐ Integer					++
		☐ Decimal
		☐ Telephone number
		☐ Slider
	☐ Boolean
		☐ Checkbox				++
		☐ Switch
	☐ Relationship
		☐ 1:1 Inline				++
		☐ 1:M Inline				++
		☐ 1:M Table				++
	☐ Date and Time
		☐ Date
		☐ Date Range
		☐ Date and Time
		☐ Spinner Date
	☐ List
		☐ Select					++
		☐ Cascade ajax select
		☐ Radio
		☐ Json Table
		☐ Tags input
	☐ Text
		☐ Simple text				++
		☐ WYSIWYG
		☐ BB Code
		☐ Code highlite
		☐ Static text
	☐ Images
		☐ Filesystem Images		++
		☐ Filesystem Image Crop	++
		☐ Database Images
		☐ Database Image Crop
		☐ Google Drive Images
	☐ Files
		☐ Filesystem Files		++
		☐ Database Files
		☐ Google Disk Files
	☐ Users
		☐ Users
		☐ Approval path
	☐ Itegration
		☐ Google Maps
		☐ Google SpreadSheet
		☐ Google Text
		☐ Google calendar
		☐ Youtube clip
		☐ Iframe
		☐ D3 Graph
	☐ Calculated values
		☐ Condition styling
		☐ Ajax request field
	☐ Object Control
		☐ Edit history (Logging)
		☐ Detailed edit history (Version control)
	☐ Communications
		☐ Google Comments