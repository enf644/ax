REFACTORING ROUND ONE:
	Переделать Workflow constructor:
		✔ Дорабатываем демо @done(19-02-04 10:29)
			✔ ++++ Повторить демо локально - https://gist.github.com/davidmr001/1e9e9d619d5cbbe6f1170b57990d1e0f @done(19-02-04 10:29)
			✔ ++++ Прямоугольники, вместо кругляшков @done(19-02-04 10:29)
			✔ ++++ Действия указывают на границу прямоугольников - https://stackoverflow.com/questions/13165913/draw-an-arrow-between-two-circles/20909533#20909533 @done(19-02-04 10:29)
				✔ https://math.stackexchange.com/questions/2397682/intersection-between-rectangle-and-line-from-center-point @done(19-02-04 10:29)
				✔ https://math.stackexchange.com/questions/625266/find-collision-point-between-vector-and-fencing-rectangle @done(19-02-04 10:29)
			✔ ++++ Повторить демо локально Drag-navigate - https://bl.ocks.org/mbostock/6123708 @done(19-02-04 10:29)
				✔ ++++ Прямоугольники вместо кругов @done(19-02-04 10:29)
			✔ ++++ Создание Прямоугольников @done(19-02-04 10:29)
			✔ ++++ Сделать выгнутые связи, сделать красивыми @done(19-02-04 10:29)
			✔ ++++ Zoom @done(19-02-04 10:29)
			✔ ++++ Названия в действии @done(19-02-04 10:29)
			✔ ++++ Создание связей @done(19-02-04 10:29)
				✔ ++++ Drag правой мышки = линия к мыши @done(19-02-04 10:29)
				✔ ++++ Drop = создание action @done(19-02-04 10:29)
			✔ ++++ Drag action = меняем radius @done(19-02-04 10:29)
			✔ ++++ Действие само на себя @done(19-02-04 10:29)
				✔ ++++ Вывод ссылок на действия обновления @done(19-02-04 10:29)
			✔ ++++ подсветка при наведении @done(19-02-04 10:29)
				✔ ++++ Действие @done(19-02-04 10:29)
				✔ ++++ Действие на себя @done(19-02-04 10:29)
			✔ ++++ Объект начала @done(19-02-04 10:29)
			✔ ++++ Объект конца @done(19-02-04 10:29)
			✔ ++++ Объект All @done(19-02-04 10:29)
			✔ ++++ Удаление при наведении и нажатии Del @done(19-02-04 10:29)
				✔ ++++ Статус @done(19-02-04 10:29)
				✔ ++++ Действие @done(19-02-04 10:29)
				✔ ++++ Действие на себя @done(19-02-04 10:29)
	Инфраструктура:
		Делаем заготовочку:
			✔ ++++ Flask приложение: @done(19-02-04 10:54)
				✔ ++++ Все тянем через requirements @done(19-02-04 10:48)
				✔ ++++ Flask skeleton @done(19-02-04 10:48)
			✔ ++++ npm зависимости - автоматическая загрузка @done(19-02-04 10:29)
			✔ ++++ Git - подключить репозиторий @done(19-02-04 10:29)
			✔ ++++ vue.js @done(19-02-04 10:29)
				✔ ++++ Run cli serve @done(19-02-04 10:29)
				✔ ++++ hello world @done(19-02-04 10:29)
				✔ ++++ Несколько вложенных модулей @done(19-02-04 10:29)
				✔ ++++ Routing - система страниц @done(19-02-04 10:29)
				✔ ++++ Axios - Ajax @done(19-02-04 10:29)
			✔ ++++ WebComponents @done(19-02-04 10:29)
				✔ ++++ Сделать пробный компонет ax-grid (https://github.com/vuejs/vue-web-component-wrapper, https://github.com/karol-f/vue-custom-element) @done(19-02-04 10:29)
			✔ GraphQL @done(19-02-04 14:44)
				✔ Сделать тестовую модель SQLAlchemy - https://github.com/Getmrahul/Flask-Graphene-SQLAlchemy @done(19-02-04 14:44)
			✔ Debug @done(19-02-04 19:30)
				✔ Python debugging @done(19-02-04 16:34)
				✔ Vue debugging @done(19-02-04 19:30)
			✔ Настраиваем дополнительное рабочее место - Visual Studio @done(19-02-04 21:55)
			✔ Vuetify @done(19-02-13 09:50)
				✔ Install and place button @done(19-02-06 16:56)
				✔ Create layout @done(19-02-06 22:02)
                ✔ Try multi-layer modal @done(19-02-08 15:02)
                ✔ Create design example @done(19-02-13 09:50)
                    ✔ Toolbar @done(19-02-08 17:18)
                    ✔ Split panels x3 @done(19-02-10 17:35)
                    ✔ Re-do split panes @done(19-02-11 17:22)
                    ✔ Form with drawer @done(19-02-13 09:50)
                        ✔ Custom drawer @done(19-02-12 09:39)
                        ✔ Insert input forms @done(19-02-12 10:40)
                        ✔ Create sample drawer menu @done(19-02-12 15:07)
                        ✔ Check in modal @done(19-02-13 09:50)
            ✔ Moved to airbnb style from prettier @done(19-02-13 19:09)
            ✔ Installed logdown logger for logs @done(19-02-13 19:09)
            ✔ Vue Router @done(19-02-15 14:50)
                ✔ Home @done(19-02-14 19:11)
                ✔ FormConstructor(form_id) @done(19-02-14 19:11)
                ✔ WorkflowConstructor(form_id) @done(19-02-15 11:03)
                ✔ GridConstructor(form_id, grid_id) @done(19-02-15 11:19)
                ✔ ManageUsers @done(19-02-15 14:30)
                ✔ ManageGroup(group_id) @done(19-02-15 14:30)
                ✔ Marketplace @done(19-02-15 14:50)
                ✔ Deck designer @done(19-02-15 14:50)
			✔ Vuex @done(19-02-24 00:46)
				✔ Store contains list of forms, two components display this list @done(19-02-19 10:29)
                ✔ Call mutation on forms list @done(19-02-19 10:29)
                ✔ Call graphql from vuex action @done(19-02-24 00:46)
            ✔ GraphQL subscription @done(19-02-25 09:53)
                ✔ Run flask on gevent @done(19-02-20 15:53)
                ✔ Test subscription @done(19-02-20 15:54)
                ✔ Detect when User is added in graphiql @done(19-02-20 19:57)
                ✔ Detect when User is added in js @done(19-02-24 16:27)
                ✔ Detect when User is added in vuex @done(19-02-24 16:27)
                ✔ Create user on button click @done(19-02-25 09:53)
                ✔ Update user list via subscription @done(19-02-25 09:53)
            ✔ Move from Flask to Sanic @done(19-02-23 18:45)
                ✔ Uninstall requirements.txt @done(19-02-22 17:39)
                ✔ Install Sanic via requirements.txt @done(19-02-22 17:39)
                ✔ Hello world @done(19-02-22 17:39)
                ✔ Simple index page @done(19-02-22 18:50)
                ✔ SqlAlchemy @done(19-02-22 22:52)
                ✔ GraphQl @done(19-02-22 22:52)
                ✔ Beutify python code @done(19-02-23 18:45)
            ✔ Register at https://www.codacy.com @done(19-02-25 10:02)
            ✔ Internalisation @done(19-02-26 16:17)
                ✔ Delete everything gettext-vue @done(19-02-26 15:04)
                ✔ Install i18n-vue @done(19-02-26 16:17)
			✔ UI Автотест - Cypress сделать пробный скрипт @done(19-02-26 18:27)			
            ✔ Webpack - Lazyloading @done(19-03-04 17:51)
                ✔ Compile project. @done(19-02-28 17:19)
                ✔ Configure webpack to produce one file @done(19-03-01 02:00)
                ✔ Try to include <ax-form> web-component in external page. @done(19-03-01 11:46)
                ✔ Create separate bundles - ax-form, ax-grid @done(19-03-02 16:20)
                ✔ ax-form - make separate web-component. @done(19-03-04 08:27)
                    ✔ Make component @done(19-03-02 16:20)
                    ✔ Vuetify `app` - is working without admin @done(19-03-04 08:27)
                    ✔ insert in non-vue page @done(19-03-04 08:27)
                ✔ ax-grid @done(19-03-04 10:02)
                    ✔ Make component @done(19-03-04 08:28)
                    ✔ Add ag-grid @done(19-03-04 09:23)
                    ✔ Show ax-form in modal @done(19-03-04 09:46)
                    ✔ insert in non-vue page @done(19-03-04 10:02)
                ✔ modal in modal in modal @done(19-03-04 14:20)
                ✔ Change modal component - make like in bootstrap @done(19-03-04 17:51)
            ✔ SqlAlchemy - Caching @done(19-03-07 21:43)
                ✔ Install aiocache @done(19-03-06 15:22)
                ✔ Store users list in aiocache @done(19-03-06 15:22)
                ✔ Move aiocache to separate module @done(19-03-06 17:16)
                ✔ Get aiocache setting from app.yaml @done(19-03-07 21:43)
            ✔ Implement pubsub @done(19-03-08 14:49)
                ✔ Create pubsub module @done(19-03-08 14:49)
                ✔ Test pubsub with user gql subscribe @done(19-03-08 14:49)
            ✔ Очередь для выполнения импорта, действий процесса @done(19-03-08 23:35)
                ✔ Install apscheduler @done(19-03-08 18:37)
                ✔ Run interval print job @done(19-03-08 18:37)
                ✔ Add sql store @done(19-03-08 23:35)
                ✔ Add cron job @done(19-03-08 23:35)
            ✔ Alembic - BD versioning @done(19-03-09 22:34)
                ✔ Install Alembic @done(19-03-09 11:50)
                ✔ Create first upgrade script @done(19-03-09 11:50)
                ✔ Move from sqlalchemy_utils UUID to custom GUID @done(19-03-09 16:40)
                ✔ Updgrade database from upgrade script @done(19-03-09 16:40)
                ✔ Make baseline together with create_all @done(19-03-09 17:06)                
            ✔ Add logger @done(19-03-10 19:48)
                ✔ Choose logger @done(19-03-10 19:48)
                ✔ Install logger @done(19-03-10 19:48)
                ✔ Inspect all python code and add logger (Check for try-except) @done(19-03-10 19:48)
		Авто-Деплой:
			✔ Deploy to pipy @done(19-03-12 15:55)
                ✔ Reogranize files. Make ax package. @done(19-03-11 14:03)
                    ✔ Check sanic works @done(19-03-11 13:31)
                    ✔ Check alembic @done(19-03-11 13:31)
                ✔ Create setup.py + manifest @done(19-03-11 14:03)
                ✔ Create wheel/egg @done(19-03-11 14:05)
                ✔ Check if ax works localy @done(19-03-11 14:05)
                ✔ Make relative path system @done(19-03-11 15:50)
                ✔ Make app.yaml settings work @done(19-03-11 22:13)
                    ✔ sanic ip and port @done(19-03-11 15:50)
                    ✔ time-zone, store in misc @done(19-03-11 19:08)
                    ✔ sqlite file @done(19-03-11 21:27)
                    ✔ log file @done(19-03-11 22:13)
                ✔ Make cli interface @done(19-03-12 10:33)
                    ✔ ax run --ip=127.0.0.1 --port=8082 @done(19-03-12 10:33)
                ✔ Detect server url in vue by reading src of included script @done(19-03-12 11:15)
                ✔ Publish to pipy @done(19-03-12 15:55)
                ✔ Download from pipy and run in localy @done(19-03-12 15:55)
            ✔ Rethink build, publish and upgrade process @done(19-03-14 17:37)
                ✔ Release build script @done(19-03-14 17:22)
                    ✔ Automatic bump version @done(19-03-14 17:22)
                    ✔ Tag git commit @done(19-03-14 17:37)
                    ✔ Create db migration script @done(19-03-14 17:24)
                    ✔ Store db_version in python code @done(19-03-14 17:24)
                    ✔ Set db_version for script that creates new Database @done(19-03-14 17:24)
                    ✔ Updates Manifest.in @done(19-03-14 17:24)
                    ✔ Checks if setup.py install_requires and requirements.txt in sync @done(19-03-14 17:24)
                    ✔ Delete pipy dist @done(19-03-14 17:24)
                    ✔ Create new pipy package @done(19-03-14 17:24)
                    ✔ Publish pipy package @done(19-03-14 17:24)
            ✔ Деплой в Google App Engine @done(19-03-15 16:43)
                ✔ Create google ax account @done(19-03-15 09:25)
                ✔ Deploy AX @done(19-03-15 16:43)

=========================================================================================================                                
            
AX 20:
	☐ ADMIN INDEX
		✔ Полная структура навигации с всеми компонентами @done(19-02-15 14:53)
		✔ from-constructor-drawer
        ✔ Form tree @done(19-03-28 11:10)
            ✔ Create all tables from model @done(19-03-19 11:33)
            ✔ jstree or alternative @done(19-03-19 13:17)
            ✔ GraphQL schema in py - select, update @done(19-03-19 14:52)
            ✔ Create AxForm @done(19-03-20 11:49)
                ✔ Popup with form @done(19-03-19 15:54)
                ✔ Unique db_names. @done(19-03-19 17:08)
                ✔ Call gql mutation from form @done(19-03-19 17:58)
                ✔ Validate if table already exists @done(19-03-19 20:41)
                ✔ Close modal and erase data @done(19-03-19 20:41)
                ✔ If db_name is changed - validation must pass @done(19-03-20 10:58)
                ✔ Cancel button and Click outside popup @done(19-03-20 11:34)
                ✔ Regular expression for db_name @done(19-03-20 11:49)
            ✔ jstree on real data using vuex state @done(19-03-20 18:07)
            ✔ Move to form, change order @done(19-03-21 17:08)
            ✔ Update jstree on vuex state change @done(19-03-21 18:57)
            ✔ Goto on node click @done(19-03-21 20:48)
            ✔ Create folder @done(19-03-21 21:56)
            ✔ Edit folder @done(19-03-22 10:32)
            ✔ Popup messages @done(19-03-22 11:37)
            ✔ Delete folder @done(19-03-22 13:18)
            ✔ Frogs @done(19-03-22 13:57)
                ✔ small letters in db_name @done(19-03-22 13:47)
                ✔ Enter couses page reload @done(19-03-22 13:56)
            ✔ Internalisation @done(19-03-22 17:21)
                ✔ Take eveything from locale @done(19-03-22 16:53)
                ✔ Make ru locale, test @done(19-03-22 17:21)
            ✔ Form update popup @done(19-03-26 14:51)
                ✔ Modal with element @done(19-03-26 14:51)
                ✔ Icon picker @done(19-03-26 14:51)
                ✔ Update mutation @done(19-03-26 14:51)
                ✔ Change database dialects query @done(19-03-26 14:51)
                ✔ Change url on dbName change @done(19-03-26 14:51)
            ✔ Delete form and drop table @done(19-03-26 17:42)
            ✔ Create cy test @done(19-03-28 11:10)
                ✔ Create folder @done(19-03-23 23:47)
                ✔ Update folder @done(19-03-28 11:09)
                ✔ Create form @done(19-03-23 23:47)
                ✔ Go to form constructor @done(19-03-28 11:09)
                ✔ Update form name and dbName @done(19-03-28 11:09)
                ✔ Check url changed, name in toolbar changed @done(19-03-28 11:09)
                ✔ Delete form @done(19-03-28 11:09)
                ✔ Delete folder @done(19-03-28 11:09)
    ✔ FORM CONSTRUCTOR @done(19-04-15 13:30)
        ✔ Field types tree @done(19-04-15 12:16)
        ✔ Fields tree @done(19-04-15 12:16)
            ✔ Add tab @done(19-03-30 10:08)
            ✔ Add field @done(19-04-01 17:41)
            ✔ Change field position @done(19-04-03 09:32)
            ✔ Update tab @done(19-04-05 12:24)
            ✔ Delete tab @done(19-04-05 12:24)
            ✔ Update field @done(19-04-05 12:24)
            ✔ Delete field @done(19-04-05 12:24)
            ✔ dialects are executing queries @done(19-04-05 18:03)
            ✔ Style tree as axy @done(19-04-06 17:33)
                ✔ Outline, background @done(19-04-05 19:42)
                ✔ Change name, then change db_name @done(19-04-06 17:33)
            ✔ Regexp in field db_name @done(19-04-06 17:40)
            ✔ Open first group of each tree @done(19-04-06 20:16)
            ✔ Default tab @done(19-04-06 20:40)
        ✔ Avalible fields tree @done(19-04-01 17:45)
        ✔ Web elements: @done(19-04-01 17:45)
            ✔ tab @done(19-04-01 17:45)
            ✔ field @done(19-04-01 17:45)
        ✔ Bug - delete form, create with same name -> fields stay @done(19-04-07 15:49)
        ✔ AxForm preview @done(19-04-15 12:16)
        ✔ Field settings popup @done(19-04-15 12:16)
    ✔ AxForm @done(19-04-15 12:21)
        ✔ Get fields, values, actions @done(19-04-10 09:18)
        ✔ Dynamicly load field types by @done(19-04-10 09:18)
        ✔ Create 2 field dummys - base, string, checkbox. @done(19-04-10 09:48)
        ✔ Tabs - switching tabs @done(19-04-10 11:13)
        ✔ Form submit - js @done(19-04-10 14:14)
        ✔ Fields settings @done(19-04-12 16:38)
            ✔ BaseComponent @done(19-04-12 08:49)
            ✔ Modal window @done(19-04-12 08:49)
            ✔ Save options_json, gql query @done(19-04-12 12:55)
            ✔ Custom settings component @done(19-04-12 12:55)
            ✔ Regexp setting for AxString @done(19-04-12 16:37)
        ✔ Validation @done(19-04-15 12:16)
            ✔ Field is reqired @done(19-04-15 12:15)
            ✔ Validate form - submit only valid @done(19-04-15 12:15)
            ✔ Errors in tabs and toggle drawer @done(19-04-15 12:15)
        ✔ Field is whole row @done(19-04-15 12:16)
    ✔ Form and home frogs @done(19-04-15 13:29)
        ✔ If form creatred -> redirect to form constructor @done(19-04-15 12:38)
        ✔ When first of field is added -> open tab @done(19-04-15 13:03)
        ✔ If field added -> focus name input @done(19-04-15 13:29)
        ✔ If tab added -> focus name input @done(19-04-15 13:29)
    ✔ AX-FIELDS @done(19-04-16 14:20)
        ✔ ax-base @done(19-04-10 09:49)
		✔ ax-string @done(19-04-10 09:49)
		✔ ax-text @done(19-04-15 18:55)
		✔ ax-num @done(19-04-15 20:40)
		✔ ax-checkbox @done(19-04-10 09:49)
		✔ ax-choise @done(19-04-16 14:20)
    ✔ GRID CONSTRUCTOR @done(19-05-14 12:49)
        ✔ Restore ax-grid @done(19-04-16 16:06)
        ✔ js-tree @done(19-04-17 10:39)
        ✔ Create default grid on form creation @done(19-04-17 11:47)
        ✔ GQL Schema and actions - @done(19-04-18 11:53)
            ✔ Add column @done(19-04-17 17:47)
            ✔ Change position @done(19-04-17 21:40)
            ✔ Delete column @done(19-04-17 21:40)
        ✔ GQL Schema - Add grid, update grid, delete grid @done(19-04-18 11:53)
        ✔ Toolbar for grids @done(19-04-23 17:13)
            ✔ Grid buttons leads to default grid @done(19-04-17 17:47)
        ✔ AXGRID @done(19-04-23 17:13)
            ✔ GQL - get grid data @done(19-04-19 10:07)
                ✔ Create and test simple type @done(19-04-19 01:20)
                ✔ Create and test dimple dynamic type @done(19-04-19 01:20)
                ✔ Create and test dynamic database type @done(19-04-19 01:20)
                ✔ Get grid info, then get make data query @done(19-04-19 10:07)
            ✔ Open form @done(19-04-23 15:08)
        ✔ Toolbar menu design @done(19-04-19 12:53)
        ✔ Update ax-grid on setting change @done(19-04-23 17:12)
        ✔ Row width @done(19-04-25 11:17)
        ✔ Filter @done(19-04-25 11:31)
        ✔ Sort @done(19-04-25 11:31)
        ✔ Qucik search @done(19-04-25 13:10)
        ✔ Settings @done(19-04-28 18:58)
            ✔ Quick search @done(19-04-28 18:46)
            ✔ Column resize @done(19-04-28 18:46)
            ✔ Filtering @done(19-04-28 18:46)
            ✔ Sorting @done(19-04-28 18:46)
            ✔ Open form @done(19-04-28 18:46)
            ✔ Actions @done(19-04-28 18:46)
            ✔ Flat mode @done(19-04-28 18:46)
            ✔ Row height @done(19-04-28 18:58)
            ✔ Pinned columns @done(19-04-28 18:58)
        ✔ AxGridSettings @done(19-04-30 08:41)
            ✔ Component @done(19-04-29 12:34)
            ✔ Popup @done(19-04-29 12:34)
            ✔ GQL mutation, query, action, vuex mutation. @done(19-04-29 12:34)
                ✔ Update @done(19-04-29 12:35)
                ✔ Delete @done(19-04-30 08:41)
        ✔ Grids list @done(19-04-30 08:41)
            ✔ Popup @done(19-04-29 19:05)
            ✔ Create @done(19-04-29 19:05)
        ✔ Get row data for form - ax form for specific guid @done(19-05-02 15:30)
        ✔ Reload schema on every edit @done(19-05-07 09:50)
        ✔ Cell is web-component @done(19-05-09 10:38)
        ✔ Server filter @done(19-05-11 22:58)
            ✔ Query builder @done(19-05-11 12:09)
            ✔ Dynamic GQL for grids @done(19-05-11 22:33)
            ✔ Filter num on button @done(19-05-11 22:58)
        ✔ Frogs @done(19-05-14 12:49)
            ✔ Grid data not loaded if user is coming form home @done(19-04-23 15:50)
            ✔ If icon or form name is changed -> form preview does not reload @done(19-05-12 10:15)
            ✔ axState is not created in database @done(19-05-12 10:16)
            ✔ Form drawer transition must accur only after everything loaded @done(19-05-14 09:15)
            ✔ If grid have two columns with same field - they have only one width @done(19-04-25 11:18)
            ✔ When less then 3 fields in AxForm - they do not flex @done(19-05-14 09:21)
            ✔ Problem in column positions @done(19-05-14 12:16)
            ✔ Remove media columns from grid constructor @done(19-05-14 12:49)
    ☐ WORKFLOW
        ✔ Insert D3 sample and make it work @done(19-05-15 20:09)
        ✔ Create default workflow on form creation @done(19-05-16 14:13)
        ✔ Change sample - switch ids to guids @done(19-05-16 15:07)
        ✔ Hook d3 to default workflow @done(19-05-16 18:10)
        ✔ GQL actions - schema, query, vuex action, vuex setter @done(19-05-20 20:00)
        ✔ Create status on double click @done(19-05-21 10:51)
            ✔ State name must be unique @done(19-05-20 19:54)
        ✔ Create self-action @done(19-05-21 10:51)
            ✔ Update action in default workflow @done(19-05-21 10:22)
            ✔ Create "update" action on state creation @done(19-05-21 10:51)
            ✔ Create "update" action on drag to self @done(19-05-21 10:51)
            ✔ Delete confirmation to default workflow @done(19-05-21 10:51)
        ✔ Create action on drag @done(19-05-20 19:58)
        ✔ Roles list @done(19-05-21 16:32)
            ✔ Default Admin role in default workflow @done(19-05-21 13:10)
            ✔ Role list @done(19-05-21 13:45)
            ✔ Create role button @done(19-05-21 16:32)
        ✔ Modals dummys @done(19-05-22 09:35)
            ✔ Role modal @done(19-05-22 09:35)
            ✔ Action modal @done(19-05-22 09:35)
            ✔ State modal @done(19-05-22 09:35)
        ✔ Delete actions @done(19-05-22 21:26)
            ✔ Delete role @done(19-05-22 21:26)
            ✔ Delete state @done(19-05-22 21:26)
            ✔ Delete action @done(19-05-22 21:26)
        ✔ Role modal @done(19-05-23 11:01)
            ✔ Change name @done(19-05-23 11:01)
            ✔ Delete @done(19-05-23 11:01)
        ✔ Add role to state @done(19-05-23 15:02)
        ✔ Add role to action @done(19-05-23 15:02)
        ✔ Highlite roles on mouseover @done(19-05-23 21:01)
        ✔ State modal @done(19-05-28 16:39)
            ✔ Name @done(19-05-24 12:45)
            ✔ Delete - all connected actions must be deleted @done(19-05-24 12:45)
            ✔ Roles - remove @done(19-05-25 18:27)
            ✔ Permissions
                ✔ Permission component @done(19-05-25 23:52)
            ✔ State name must be unique @done(19-05-28 16:39)
        ✔ Admin default permissions @done(19-05-27 11:11)
            ✔ On state creation -> add admin role @done(19-05-27 10:23)
            ✔ On field cration -> add admin role to @done(19-05-27 10:23)
            ✔ On action creation -> add admin @done(19-05-27 11:11)
            ✔ Cant rename or delete admin group @done(19-05-27 11:11)
        ✔ Action modal @done(19-05-28 11:08)
            ✔ Name @done(19-05-27 11:39)
            ✔ Roles - remove @done(19-05-27 14:13)
            ✔ Icon @done(19-05-27 15:31)
            ✔ Code @done(19-05-28 10:27)
            ✔ Delete @done(19-05-28 11:08)
    ☐ RELATION FIELDS
		✔ multiple pop-ups @done(19-04-16 14:41)
		☐ ax-1tom
		☐ ax-mtom
		☐ ax-mtom-table
    ☐ COMPLEX FIELDS
		☐ ax-files
		☐ ax-crop-image
    ☐ ACTION ENGINE
        ☐ Create actions
        ☐ Change state action
        ☐ Delete action
        ☐ Run python code action
            ☐ Try email
        ☐ Confirm text
        ☐ Close modal
    ☐ TEST MILESTONE
        ☐ Cover everything with cypress tests
        ☐ Try pip installation
        ☐ Try app engine installation
        ☐ ESTABLISH CI
            ☐ Each commit runs tests - installs from pip, runs cypress tests
    ☐ USERS
        ☐ GAuth
        ☐ GraphQL authorisation
        ☐ Every GQL mutation needs permissions
        ☐ Админ дает доступ пользователю или группе на Папку в списке объектов.
            ☐ Если доступ есть - пользователь может в этой папке создавать объекты и менять уже созданные
        ☐ Roles modal - add users
    ☐ PAGES DESIGNER
	☐ MARKETPLACE
		☐ Dump application to yaml
        ☐ Install application from yaml
        ☐ Load settings for existing forms from yaml - form, workflow, grids
        ☐ Git integration
    ☐ GLOBAL FROGS
        ☐ Different sorting and filtering for different types
            ☐ Server filter - must be loaded dynamicly
            ☐ Grid filter - must be loaded dynamicly
        ☐ Add clould logger for python and vue
        ☐ Product usage statistics
        ☐ LICENSING
    ☐ ALL FIELDS
    ☐ ACTION EXPERIENCE
        ☐ Message pop-up from python code
        ☐ Logging code 
        ☐ Code highlite and autocomplete
            ☐ Monaco language server, language client
            ☐ Code snippets


BEFORE LAUNCH:
    ☐ Landing page
    ☐ Documentation
        ☐ Sphninx in repo -> https://gist.github.com/GLMeece/222624fc495caf6f3c010a8e26577d31
        ☐ Gitbook -> https://www.gitbook.com/?t=1                
        ☐ Ax Deck !!!
    ☐ Lincese key generation, desribution and 


    
Additional versions:
    ☐ Sass
        ☐ Деплой в App Engine через Market
    ☐ Сборка docker image и деплой куда-то
    ☐ Kubernates

    
=============================================================================================



NEW FROGS TODOS:
    ✔ Discover why ripple effects are not working in chrome @done(19-02-13 07:24)
    ✔ Minification not working with vue-custom-element. https://github.com/karol-f/vue-custom-element/issues/159 @done(19-03-01 19:34)
    ✔ Vuetify - include only components that are used @done(19-03-01 02:00)
    ☐ Disable maximise on double click on split-panes
    ☐ Discover minimum window size for ax admin. Output warning if window is less then minimum
    ☐ Python unit-test - сделать и прогнать
    ☐ `[IMPORTANT]` Webpack - additional minification
        ☐ Roboto - load only one, include in js
        ☐ Font-awesome - only regular, include in js
            ☐ https://github.com/FortAwesome/vue-fontawesome
            ☐ https://codepen.io/Goji/pen/mLKMVR
        ☐ Include images in js
    ☐ Margins in ax-form and ax-grid must be responsive. 0% on mobile
    ☐ Do Lazy loading with webpack - load grid first, then form.
    ✔ Change AsyncioPubsub to production pubsub implementation @done(19-05-02 09:37)
    ☐ Setup must set data in many files:
        ☐ apollo.js - ip, port
        ✔ alembic - database @done(19-03-12 09:25)
        ✔ cache - redis settings (take from app.yaml) @done(19-03-12 09:25)
        ✔ scheduler - UTC zone from app.yaml @done(19-03-12 09:25)
        ☐ model - database constring, set binary=False if DB have uuid type
        ☐ package.json
    ☐ `[IMPORTANT]` Websockets not working in App Engine Standard! https://issuetracker.google.com/issues/35886348
    ☐ `[IMPORTANT]` Roboto font not working with webpack. Replace CDN dependency
    ☐ `[IMPORTANT]` Replace CDN dependency for wont-awesome
    ☐ Remember opened nodes is JsTree
    ☐ `[IMPORTANT]`  Security for all admin actions. Only admin can make gql queries
    ☐ AdminHome - if no forms created - output message
    ☐ Cant delete last tab and last field in AxForm
    ☐ Jstree - remember opened nodes
    ☐ If form does not exist, but someone entered via url - must be error
    ✔ AxFrom - size transition caouses a ton of resize events that are captured by handleResize @done(19-04-17 09:37)
    ☐ Paging in AxGrid


NEW FEATURES:
    ☐ Use simple grid (no need for 700kb ag-grid)
    ☐ Remember the width of constructor drawers in cookies
    ☐ Allow one level of subfolders for AxForm - https://vuetifyjs.com/en/components/lists#expansion-lists
    ☐ AxForm - make dynamic form header. If wide form - it is in drawer. If it is slim - it is in form.
    ☐ `[IMPORTANT]` Подключение дополнительных полей и плагинов
        ☐ Подключается поле через lazy-loading - unpkg.com
    ☐ `[IMPORTANT]` Billing for Sass services that run ontop of AX
    ☐ Custom error pages for admin
    ☐ Detect unsuported browsers and print error
    ☐ Backup mechanism
    ☐ If js exception - show toast with rerort button
    ☐ Icons of roles in workflow constructor
    
MAYBE LATER:
    ☐ python autodoc
    ☐ Автодокументирование vue.js кода
    ☐ Automatic version from Git - https://pypi.org/project/setuptools-git-version/
    ☐ PBR - automatic versioning based on Git - https://docs.openstack.org/pbr/latest/user/features.html
    ☐ Делаем инструкцию по настройке рабочего места


==============================================================================================


Критерии работы экосистемы:
    ✔ Файловая структура - Модель, Контроллер @done(19-02-26 16:22)
    ✔ Система билда - минификация, условная загрузка @done(19-03-07 21:44)
    ✘ Должна быть сгенерирована авто-документация по методам python @cancelled(19-02-26 16:22)
    ✘ Должна быть сгенерирована авто-документация по компонентам Vue @cancelled(19-02-26 16:22)
    ✔ Должна собираться и запускаться из pip @done(19-03-12 16:14)
        ✔ Должна тянуть все зависимости через pip и npm - requirements.txt @done(19-03-12 16:14)
        ✔ Должна разворачиваться SQL Lite @done(19-02-26 23:39)
    ✔ Должна деплоится и работать на app-engine @done(19-03-15 16:45)
    ☐ Должен работать автодеплой внутри app-engine
    ☐ Должны быть сформулированы behave сценарии тестирования
    ☐ Работает механизм обновления модуля - pip upgrade обновляет модуль, БД конфигуриться при первом запуске через SqlAlchemy patch
        ☐ Alembic
        ☐ pip upgrade
    ☐ Работает механизм подключения плагинов
    ☐ Должны быть развернуты версии для тестирования - 
        ☐ Версия в appengine
        ☐ Версия которая собирается через pip - SQLLite
        ☐ Версия Docker с MySQL - ??
    ☐ Должны прогоняться ui тесты согласно behave сценариям по всем развернутым версиям
    ☐ Быстрая настройка рабочего места
        ☐ Инструкция по конфигурированию рабочего места
        ☐ Из гита тянем сорс, запускаем автоконфиг - тянутся все зависимости для рабочего места и все модули javascript
    ✔ WebSockets обновление грида, дека @done(19-02-26 16:23)
    ☐ Check all elements - https://github.com/harshanarayana/cookiecutter-sanic

Для каждого веб-елемента:
    ☐ Документирование 
    ☐ Для каждого ajax - on-error="..."
    ☐ Интернационализация/локализация
    ☐ Все комментарии на английском
    ☐ Покрыть UI авто-тестом

Для каждого метода в main.py:
    ☐ Заполнить самодокументирование
    ☐ Везде где есть входные переменные - проверять их наличие и значение
    ☐ Покрыть код try-catch-finaly
    ☐ Покрыть код with вместо open, close
    ☐ Все SQL запросы беруться из справочника - проверяем на SQLLite и MySQL
    ✘ Сделать unit-test @cancelled(19-02-26 23:40)

Every commit checklist:
    ☐ No errors or warnings in pylint or eslint
    ☐ Developed feature is covered by cypress test
    ☐ App engine deployed successfully
    ☐ Automated test process pass:
        ☐ All cypress tests passed localy
        ☐ All cypress tests passed on app engine

Every new version checklist:
    ☐ Locale is updated. All translations are done
    ☐ Pypi package is updated
    ☐ App engine file storage is updated
    ☐ App engine application is created from market
    ☐ Docker image is updated
    ☐ Kubernates image is updated
    ☐ e2e tests are passed on all platforms
        ☐ windows - standalone
        ☐ linux - standalone
        ☐ linux - wsgi
        ☐ app engine
        ☐ docker
        ☐ kubernate
    ☐ Version upgrade is tested
    ☐ Version rollback is tested
    ☐ New documentation is released
    ☐ After everything - automatic version incriment and Github pull request to master

==============================================================================================

Критерии работы экосистемы:
    ✔ Файловая структура - Модель, Контроллер @done(19-02-26 16:22)
    ✔ Система билда - минификация, условная загрузка @done(19-03-07 21:44)
    ✘ Должна быть сгенерирована авто-документация по методам python @cancelled(19-02-26 16:22)
    ✘ Должна быть сгенерирована авто-документация по компонентам Vue @cancelled(19-02-26 16:22)
    ✔ Должна собираться и запускаться из pip @done(19-03-12 16:14)
        ✔ Должна тянуть все зависимости через pip и npm - requirements.txt @done(19-03-12 16:14)
        ✔ Должна разворачиваться SQL Lite @done(19-02-26 23:39)
    ✔ Должна деплоится и работать на app-engine @done(19-03-15 16:45)
    ☐ Должен работать автодеплой внутри app-engine
    ☐ Должны быть сформулированы behave сценарии тестирования
    ☐ Работает механизм обновления модуля - pip upgrade обновляет модуль, БД конфигуриться при первом запуске через SqlAlchemy patch
        ☐ Alembic
        ☐ pip upgrade
    ☐ Работает механизм подключения плагинов
    ☐ Должны быть развернуты версии для тестирования - 
        ☐ Версия в appengine
        ☐ Версия которая собирается через pip - SQLLite
        ☐ Версия Docker с MySQL - ??
    ☐ Должны прогоняться ui тесты согласно behave сценариям по всем развернутым версиям
    ☐ Быстрая настройка рабочего места
        ☐ Инструкция по конфигурированию рабочего места
        ☐ Из гита тянем сорс, запускаем автоконфиг - тянутся все зависимости для рабочего места и все модули javascript
    ✔ WebSockets обновление грида, дека @done(19-02-26 16:23)
    ☐ Check all elements - https://github.com/harshanarayana/cookiecutter-sanic

Для каждого веб-елемента:
    ☐ Документирование 
    ☐ Для каждого ajax - on-error="..."
    ☐ Интернационализация/локализация
    ☐ Все комментарии на английском
    ☐ Покрыть UI авто-тестом

Для каждого метода в main.py:
    ☐ Заполнить самодокументирование
    ☐ Везде где есть входные переменные - проверять их наличие и значение
    ☐ Покрыть код try-catch-finaly
    ☐ Покрыть код with вместо open, close
    ☐ Все SQL запросы беруться из справочника - проверяем на SQLLite и MySQL
    ✘ Сделать unit-test @cancelled(19-02-26 23:40)

Every commit checklist:
    ☐ No errors or warnings in pylint or eslint
    ☐ Developed feature is covered by cypress test
    ☐ App engine deployed successfully
    ☐ Automated test process pass:
        ☐ All cypress tests passed localy
        ☐ All cypress tests passed on app engine

Every new version checklist:
    ☐ Locale is updated. All translations are done
    ☐ Pypi package is updated
    ☐ App engine file storage is updated
    ☐ App engine application is created from market
    ☐ Docker image is updated
    ☐ Kubernates image is updated
    ☐ e2e tests are passed on all platforms
        ☐ windows - standalone
        ☐ linux - standalone
        ☐ linux - wsgi
        ☐ app engine
        ☐ docker
        ☐ kubernate
    ☐ Version upgrade is tested
    ☐ Version rollback is tested
    ☐ New documentation is released
    ☐ After everything - automatic version incriment and Github pull request to master


============================================================================================


AX SAAS BETA:
	☐ DEPLOY
		☐ Очередь вместо ajax запроса.
	☐ BACKEND
		☐ Сон и пробуждение неак��ивных контейнеров
	☐ Производительность и Масштабируемость
		☐ Отслеживание ресурсов сервера
		☐ Отслеживание открытых контейнеров
	☐ Инструкции для разработчиков
		☐ Как собрать приложение из git и запустить - pip, app get, git, bower, bower_installer
		☐ Как работает билд скрипт 
		☐ Как паблишить новую версию core и market
		☐ App Engine - логи, instances, versions
		☐ Как работает Ax.Market		
	☐ Сайт
		☐ Лендинг
		☐ Регистрация и вход клиента
		☐ Tutorial - анимированные шаги как инструкция
	☐ Бэк енд
		☐ Отслеживание оплаты
		☐ Отслеживание ��есурсов
		☐ Стратегия изменений
		☐ Выкладываение в Google Apps Market		
	☐ Tutorial
		☐ Form-constructor
		☐ Process-constructor
		☐ Grid-constructor
		☐ Dashboard-constuctor
		☐ Users
		☐ Ax-marketplace
	☐ ПРОЦЕССЫ
		☐ Условия
		☐ Действия по таймеру или условию		
	☐ PYTHON в действиях 
		☐ Autocomplete при написании кода
		☐ Debug
		☐ Log
	☐ Групповые действия
		☐ Исполнение онлайн или в очереди
	☐ AX MARKETPLACE
		☐ Пользователи могут предлагать пред-настроенные Ax БД в виде дампа. За деньги или бесплатно.
		☐ Приложение это
			☐ SQL
			☐ web-elements полей
			☐ Серверные скрипты через pip
	☐ Features
		☐ Right-click menu in grid
		☐ Copy action
		☐ Export to excel

OLD FEATURES:
	☐ Редактировать объект можно исключительно клавиатурой
	☐ Сообщение при создании - ИД созданной записи
	☐ Удаление нескольких объектов через правый клик 
	☐ Разные фильтры в гриде под разные типы данных - текст\число\дата
	☐ Логирование всех действий в админке
	☐ Features полей
		☐ MtoM
			☐ Settings - Максимальное количество элементотв
			☐ Удаление выбранных элементов в 1om_view
		☐ M:M Table
			☐ Добавление новой строчки при открытом mtom
			☐ При добавлении 1тоМ возможность указать default view
	☐ Список замещающих
	☐ Javascript в действиях - выполняется после выполнения действий на клиенте.
	☐ URL для совершения действия. Можно вставлять в письма из action.
	☐ Рядом с линком грида - счетчик строк в гриде (кол-во непрачитанных, кол-во всего)
	☐ Default tab at state settings - настройка в статусе - дефалтная закладка.
	☐ Form constructor - save entered values on form preview
	☐ Grid constructor - опции размера формы - эмуляция экрана
	☐ Grid constructor - опции modalSize
	☐ Если при загрузке grid options возникает exception - сбрасывать настройки на defaultные
	☐ Удаление колонки - дроп на drawer,	дроп на drawer для form constructor
	☐ Form constructor - поиск по типам полей
	☐ Ax-Field - 1toM - Связанные списки - выбераем один, ставится серверный фильтр на следующий. Тоже самое при изменении процесса - грид не обновляется.
	☐ Form-constuctor - выбор иконки плагином - https://farbelous.github.io/fontawesome-iconpicker/
	☐ Подсказка для ax-string
	☐ Сделать прямые стрелки для Action по умолчанию
	☐ Workflow editor - сделать Объект all. Если действие идет от алл - значит действие доступно на любом статусе.
	☐ Возможность использовать одну БД для авторизации пользователей в нескольких установках Axy (Несколько БД)
	☐ Наследование объектов. Объекты унаследованные от одного источника можно отображать в одном гриде.
	☐ В гриде можно отображать данные нескольких форм, если у них есть одинаковые поля.




PROBLEMS:
	☐ ++++ Если переименовать поле - слитают все view. Нужно перекликивать
	☐ ++++ Несколько гридов на странице
	☐ ++++ iron-ajax изменен! Нужно сделать свой элемент. Вроде для удаленного доступа. ret_url = "http://araxy-enf644.c9.io" + ret_url
	☐ Кэширование в IE10
	☐ escape string при Insert и update - сейчас тупа replace стоит
	☐ Сабмит в форме 2 раза
	☐ http://stackoverflow.com/questions/24956894/sql-alchemy-queuepool-limit-overflow
	☐ Во всех полях Polymer.IronValidatableBehavior не работает - все проверяется в ax-form вручную.
	☐ Form-constructor работатет на async с замедлением. Жесткой связи событий нет. МОжет не работать на медлен��ом соединении.
	☐ Process-constructor - может потеряться json go.js процесса!



ALL AX FIELDS:
	☐ Identification
		☐ Id
		☐ Numeration
	☐ Decoration
		☐ Header
		☐ Text
	☐ String
		☐ Simple String			++
		☐ Email
		☐ Static header
	☐ Number
		☐ Integer					++
		☐ Decimal
		☐ Telephone number
		☐ Slider
	☐ Boolean
		☐ Checkbox				++
        ☐ Switch
        ☐ 2D radio survey
    ☐ Payment
        ☐ Paypal
        ☐ Stripe
        ☐ ... check jotforms
	☐ Relationship
		☐ 1:1 Inline				++
		☐ 1:M Inline				++
		☐ 1:M Table				++
	☐ Date and Time
		☐ Date
		☐ Date Range
		☐ Date and Time
		☐ Spinner Date
	☐ List
		☐ Select					++
		☐ Cascade ajax select
		☐ Radio
		☐ Json Table
		☐ Tags input
	☐ Text
		☐ Simple text				++
		☐ WYSIWYG
		☐ BB Code
		☐ Code highlite
		☐ Static text
	☐ Images
		☐ Filesystem Images		++
		☐ Filesystem Image Crop	++
		☐ Database Images
		☐ Database Image Crop
		☐ Google Drive Images
	☐ Files
		☐ Filesystem Files		++
		☐ Database Files
		☐ Google Disk Files
	☐ Users
		☐ Users
		☐ Approval path
	☐ Itegration
		☐ Google Maps
		☐ Google SpreadSheet
		☐ Google Text
		☐ Google calendar
		☐ Youtube clip
		☐ Iframe
		☐ D3 Graph
	☐ Calculated values
		☐ Condition styling
		☐ Ajax request field
	☐ Object Control
		☐ Edit history (Logging)
		☐ Detailed edit history (Version control)
	☐ Communications
		☐ Google Comments