ROUND ONE:
	Переделать Workflow constructor:
		✔ Дорабатываем демо @done(19-02-04 10:29)
			✔ ++++ Повторить демо локально - https://gist.github.com/davidmr001/1e9e9d619d5cbbe6f1170b57990d1e0f @done(19-02-04 10:29)
			✔ ++++ Прямоугольники, вместо кругляшков @done(19-02-04 10:29)
			✔ ++++ Действия указывают на границу прямоугольников - https://stackoverflow.com/questions/13165913/draw-an-arrow-between-two-circles/20909533#20909533 @done(19-02-04 10:29)
				✔ https://math.stackexchange.com/questions/2397682/intersection-between-rectangle-and-line-from-center-point @done(19-02-04 10:29)
				✔ https://math.stackexchange.com/questions/625266/find-collision-point-between-vector-and-fencing-rectangle @done(19-02-04 10:29)
			✔ ++++ Повторить демо локально Drag-navigate - https://bl.ocks.org/mbostock/6123708 @done(19-02-04 10:29)
				✔ ++++ Прямоугольники вместо кругов @done(19-02-04 10:29)
			✔ ++++ Создание Прямоугольников @done(19-02-04 10:29)
			✔ ++++ Сделать выгнутые связи, сделать красивыми @done(19-02-04 10:29)
			✔ ++++ Zoom @done(19-02-04 10:29)
			✔ ++++ Названия в действии @done(19-02-04 10:29)
			✔ ++++ Создание связей @done(19-02-04 10:29)
				✔ ++++ Drag правой мышки = линия к мыши @done(19-02-04 10:29)
				✔ ++++ Drop = создание action @done(19-02-04 10:29)
			✔ ++++ Drag action = меняем radius @done(19-02-04 10:29)
			✔ ++++ Действие само на себя @done(19-02-04 10:29)
				✔ ++++ Вывод ссылок на действия обновления @done(19-02-04 10:29)
			✔ ++++ подсветка при наведении @done(19-02-04 10:29)
				✔ ++++ Действие @done(19-02-04 10:29)
				✔ ++++ Действие на себя @done(19-02-04 10:29)
			✔ ++++ Объект начала @done(19-02-04 10:29)
			✔ ++++ Объект конца @done(19-02-04 10:29)
			✔ ++++ Объект All @done(19-02-04 10:29)
			✔ ++++ Удаление при наведении и нажатии Del @done(19-02-04 10:29)
				✔ ++++ Статус @done(19-02-04 10:29)
				✔ ++++ Действие @done(19-02-04 10:29)
				✔ ++++ Действие на себя @done(19-02-04 10:29)
	Инфраструктура:
		Делаем заготовочку:
			✔ ++++ Flask приложение: @done(19-02-04 10:54)
				✔ ++++ Все тянем через requirements @done(19-02-04 10:48)
				✔ ++++ Flask skeleton @done(19-02-04 10:48)
			✔ ++++ npm зависимости - автоматическая загрузка @done(19-02-04 10:29)
			✔ ++++ Git - подключить репозиторий @done(19-02-04 10:29)
			✔ ++++ vue.js @done(19-02-04 10:29)
				✔ ++++ Run cli serve @done(19-02-04 10:29)
				✔ ++++ hello world @done(19-02-04 10:29)
				✔ ++++ Несколько вложенных модулей @done(19-02-04 10:29)
				✔ ++++ Routing - система страниц @done(19-02-04 10:29)
				✔ ++++ Axios - Ajax @done(19-02-04 10:29)
			✔ ++++ WebComponents @done(19-02-04 10:29)
				✔ ++++ Сделать пробный компонет ax-grid (https://github.com/vuejs/vue-web-component-wrapper, https://github.com/karol-f/vue-custom-element) @done(19-02-04 10:29)
			✔ GraphQL @done(19-02-04 14:44)
				✔ Сделать тестовую модель SQLAlchemy - https://github.com/Getmrahul/Flask-Graphene-SQLAlchemy @done(19-02-04 14:44)
			✔ Debug @done(19-02-04 19:30)
				✔ Python debugging @done(19-02-04 16:34)
				✔ Vue debugging @done(19-02-04 19:30)
			✔ Настраиваем дополнительное рабочее место - Visual Studio @done(19-02-04 21:55)
			✔ Vuetify @done(19-02-13 09:50)
				✔ Install and place button @done(19-02-06 16:56)
				✔ Create layout @done(19-02-06 22:02)
                ✔ Try multi-layer modal @done(19-02-08 15:02)
                ✔ Create design example @done(19-02-13 09:50)
                    ✔ Toolbar @done(19-02-08 17:18)
                    ✔ Split panels x3 @done(19-02-10 17:35)
                    ✔ Re-do split panes @done(19-02-11 17:22)
                    ✔ Form with drawer @done(19-02-13 09:50)
                        ✔ Custom drawer @done(19-02-12 09:39)
                        ✔ Insert input forms @done(19-02-12 10:40)
                        ✔ Create sample drawer menu @done(19-02-12 15:07)
                        ✔ Check in modal @done(19-02-13 09:50)
            ✔ Moved to airbnb style from prettier @done(19-02-13 19:09)
            ✔ Installed logdown logger for logs @done(19-02-13 19:09)
            ✔ Vue Router @done(19-02-15 14:50)
                ✔ Home @done(19-02-14 19:11)
                ✔ FormConstructor(form_id) @done(19-02-14 19:11)
                ✔ WorkflowConstructor(form_id) @done(19-02-15 11:03)
                ✔ GridConstructor(form_id, grid_id) @done(19-02-15 11:19)
                ✔ ManageUsers @done(19-02-15 14:30)
                ✔ ManageGroup(group_id) @done(19-02-15 14:30)
                ✔ Marketplace @done(19-02-15 14:50)
                ✔ Pages designer @done(19-02-15 14:50)
			✔ Vuex @done(19-02-24 00:46)
				✔ Store contains list of forms, two components display this list @done(19-02-19 10:29)
                ✔ Call mutation on forms list @done(19-02-19 10:29)
                ✔ Call graphql from vuex action @done(19-02-24 00:46)
            ✔ GraphQL subscription @done(19-02-25 09:53)
                ✔ Run flask on gevent @done(19-02-20 15:53)
                ✔ Test subscription @done(19-02-20 15:54)
                ✔ Detect when User is added in graphiql @done(19-02-20 19:57)
                ✔ Detect when User is added in js @done(19-02-24 16:27)
                ✔ Detect when User is added in vuex @done(19-02-24 16:27)
                ✔ Create user on button click @done(19-02-25 09:53)
                ✔ Update user list via subscription @done(19-02-25 09:53)
            ✔ Move from Flask to Sanic @done(19-02-23 18:45)
                ✔ Uninstall requirements.txt @done(19-02-22 17:39)
                ✔ Install Sanic via requirements.txt @done(19-02-22 17:39)
                ✔ Hello world @done(19-02-22 17:39)
                ✔ Simple index page @done(19-02-22 18:50)
                ✔ SqlAlchemy @done(19-02-22 22:52)
                ✔ GraphQl @done(19-02-22 22:52)
                ✔ Beutify python code @done(19-02-23 18:45)
            ✔ Register at https://www.codacy.com @done(19-02-25 10:02)
            ✔ Internalisation @done(19-02-26 16:17)
                ✔ Delete everything gettext-vue @done(19-02-26 15:04)
                ✔ Install i18n-vue @done(19-02-26 16:17)
			✔ UI Автотест - Cypress сделать пробный скрипт @done(19-02-26 18:27)			
            ✔ Webpack - Lazyloading @done(19-03-04 17:51)
                ✔ Compile project. @done(19-02-28 17:19)
                ✔ Configure webpack to produce one file @done(19-03-01 02:00)
                ✔ Try to include <ax-form> web-component in external page. @done(19-03-01 11:46)
                ✔ Create separate bundles - ax-form, ax-grid @done(19-03-02 16:20)
                ✔ ax-form - make separate web-component. @done(19-03-04 08:27)
                    ✔ Make component @done(19-03-02 16:20)
                    ✔ Vuetify `app` - is working without admin @done(19-03-04 08:27)
                    ✔ insert in non-vue page @done(19-03-04 08:27)
                ✔ ax-grid @done(19-03-04 10:02)
                    ✔ Make component @done(19-03-04 08:28)
                    ✔ Add ag-grid @done(19-03-04 09:23)
                    ✔ Show ax-form in modal @done(19-03-04 09:46)
                    ✔ insert in non-vue page @done(19-03-04 10:02)
                ✔ modal in modal in modal @done(19-03-04 14:20)
                ✔ Change modal component - make like in bootstrap @done(19-03-04 17:51)
            ✔ SqlAlchemy - Caching @done(19-03-07 21:43)
                ✔ Install aiocache @done(19-03-06 15:22)
                ✔ Store users list in aiocache @done(19-03-06 15:22)
                ✔ Move aiocache to separate module @done(19-03-06 17:16)
                ✔ Get aiocache setting from app.yaml @done(19-03-07 21:43)
            ✔ Implement pubsub @done(19-03-08 14:49)
                ✔ Create pubsub module @done(19-03-08 14:49)
                ✔ Test pubsub with user gql subscribe @done(19-03-08 14:49)
            ✔ Очередь для выполнения импорта, действий процесса @done(19-03-08 23:35)
                ✔ Install apscheduler @done(19-03-08 18:37)
                ✔ Run interval print job @done(19-03-08 18:37)
                ✔ Add sql store @done(19-03-08 23:35)
                ✔ Add cron job @done(19-03-08 23:35)
            ✔ Alembic - BD versioning @done(19-03-09 22:34)
                ✔ Install Alembic @done(19-03-09 11:50)
                ✔ Create first upgrade script @done(19-03-09 11:50)
                ✔ Move from sqlalchemy_utils UUID to custom GUID @done(19-03-09 16:40)
                ✔ Updgrade database from upgrade script @done(19-03-09 16:40)
                ✔ Make baseline together with create_all @done(19-03-09 17:06)                
            ✔ Add logger @done(19-03-10 19:48)
                ✔ Choose logger @done(19-03-10 19:48)
                ✔ Install logger @done(19-03-10 19:48)
                ✔ Inspect all python code and add logger (Check for try-except) @done(19-03-10 19:48)
		Авто-Деплой:
			✔ Deploy to pipy @done(19-03-12 15:55)
                ✔ Reogranize files. Make ax package. @done(19-03-11 14:03)
                    ✔ Check sanic works @done(19-03-11 13:31)
                    ✔ Check alembic @done(19-03-11 13:31)
                ✔ Create setup.py + manifest @done(19-03-11 14:03)
                ✔ Create wheel/egg @done(19-03-11 14:05)
                ✔ Check if ax works localy @done(19-03-11 14:05)
                ✔ Make relative path system @done(19-03-11 15:50)
                ✔ Make app.yaml settings work @done(19-03-11 22:13)
                    ✔ sanic ip and port @done(19-03-11 15:50)
                    ✔ time-zone, store in misc @done(19-03-11 19:08)
                    ✔ sqlite file @done(19-03-11 21:27)
                    ✔ log file @done(19-03-11 22:13)
                ✔ Make cli interface @done(19-03-12 10:33)
                    ✔ ax run --ip=127.0.0.1 --port=8082 @done(19-03-12 10:33)
                ✔ Detect server url in vue by reading src of included script @done(19-03-12 11:15)
                ✔ Publish to pipy @done(19-03-12 15:55)
                ✔ Download from pipy and run in localy @done(19-03-12 15:55)
            ✔ Rethink build, publish and upgrade process @done(19-03-14 17:37)
                ✔ Release build script @done(19-03-14 17:22)
                    ✔ Automatic bump version @done(19-03-14 17:22)
                    ✔ Tag git commit @done(19-03-14 17:37)
                    ✔ Create db migration script @done(19-03-14 17:24)
                    ✔ Store db_version in python code @done(19-03-14 17:24)
                    ✔ Set db_version for script that creates new Database @done(19-03-14 17:24)
                    ✔ Updates Manifest.in @done(19-03-14 17:24)
                    ✔ Checks if setup.py install_requires and requirements.txt in sync @done(19-03-14 17:24)
                    ✔ Delete pipy dist @done(19-03-14 17:24)
                    ✔ Create new pipy package @done(19-03-14 17:24)
                    ✔ Publish pipy package @done(19-03-14 17:24)
            ✔ Деплой в Google App Engine @done(19-03-15 16:43)
                ✔ Create google ax account @done(19-03-15 09:25)
                ✔ Deploy AX @done(19-03-15 16:43)

=========================================================================================================                                
            
AX 0.2:
	✔ ADMIN INDEX @done(19-06-12 10:11)
		✔ Полная структура навигации с всеми компонентами @done(19-02-15 14:53)
		✔ from-constructor-drawer
        ✔ Form tree @done(19-03-28 11:10)
            ✔ Create all tables from model @done(19-03-19 11:33)
            ✔ jstree or alternative @done(19-03-19 13:17)
            ✔ GraphQL schema in py - select, update @done(19-03-19 14:52)
            ✔ Create AxForm @done(19-03-20 11:49)
                ✔ Popup with form @done(19-03-19 15:54)
                ✔ Unique db_names. @done(19-03-19 17:08)
                ✔ Call gql mutation from form @done(19-03-19 17:58)
                ✔ Validate if table already exists @done(19-03-19 20:41)
                ✔ Close modal and erase data @done(19-03-19 20:41)
                ✔ If db_name is changed - validation must pass @done(19-03-20 10:58)
                ✔ Cancel button and Click outside popup @done(19-03-20 11:34)
                ✔ Regular expression for db_name @done(19-03-20 11:49)
            ✔ jstree on real data using vuex state @done(19-03-20 18:07)
            ✔ Move to form, change order @done(19-03-21 17:08)
            ✔ Update jstree on vuex state change @done(19-03-21 18:57)
            ✔ Goto on node click @done(19-03-21 20:48)
            ✔ Create folder @done(19-03-21 21:56)
            ✔ Edit folder @done(19-03-22 10:32)
            ✔ Popup messages @done(19-03-22 11:37)
            ✔ Delete folder @done(19-03-22 13:18)
            ✔ Frogs @done(19-03-22 13:57)
                ✔ small letters in db_name @done(19-03-22 13:47)
                ✔ Enter couses page reload @done(19-03-22 13:56)
            ✔ Internalisation @done(19-03-22 17:21)
                ✔ Take eveything from locale @done(19-03-22 16:53)
                ✔ Make ru locale, test @done(19-03-22 17:21)
            ✔ Form update popup @done(19-03-26 14:51)
                ✔ Modal with element @done(19-03-26 14:51)
                ✔ Icon picker @done(19-03-26 14:51)
                ✔ Update mutation @done(19-03-26 14:51)
                ✔ Change database dialects query @done(19-03-26 14:51)
                ✔ Change url on dbName change @done(19-03-26 14:51)
            ✔ Delete form and drop table @done(19-03-26 17:42)
            ✔ Create cy test @done(19-03-28 11:10)
                ✔ Create folder @done(19-03-23 23:47)
                ✔ Update folder @done(19-03-28 11:09)
                ✔ Create form @done(19-03-23 23:47)
                ✔ Go to form constructor @done(19-03-28 11:09)
                ✔ Update form name and dbName @done(19-03-28 11:09)
                ✔ Check url changed, name in toolbar changed @done(19-03-28 11:09)
                ✔ Delete form @done(19-03-28 11:09)
                ✔ Delete folder @done(19-03-28 11:09)
    ✔ FORM CONSTRUCTOR @done(19-04-15 13:30)
        ✔ Field types tree @done(19-04-15 12:16)
        ✔ Fields tree @done(19-04-15 12:16)
            ✔ Add tab @done(19-03-30 10:08)
            ✔ Add field @done(19-04-01 17:41)
            ✔ Change field position @done(19-04-03 09:32)
            ✔ Update tab @done(19-04-05 12:24)
            ✔ Delete tab @done(19-04-05 12:24)
            ✔ Update field @done(19-04-05 12:24)
            ✔ Delete field @done(19-04-05 12:24)
            ✔ dialects are executing queries @done(19-04-05 18:03)
            ✔ Style tree as axy @done(19-04-06 17:33)
                ✔ Outline, background @done(19-04-05 19:42)
                ✔ Change name, then change db_name @done(19-04-06 17:33)
            ✔ Regexp in field db_name @done(19-04-06 17:40)
            ✔ Open first group of each tree @done(19-04-06 20:16)
            ✔ Default tab @done(19-04-06 20:40)
        ✔ Avalible fields tree @done(19-04-01 17:45)
        ✔ Web elements: @done(19-04-01 17:45)
            ✔ tab @done(19-04-01 17:45)
            ✔ field @done(19-04-01 17:45)
        ✔ Bug - delete form, create with same name -> fields stay @done(19-04-07 15:49)
        ✔ AxForm preview @done(19-04-15 12:16)
        ✔ Field settings popup @done(19-04-15 12:16)
    ✔ AxForm @done(19-04-15 12:21)
        ✔ Get fields, values, actions @done(19-04-10 09:18)
        ✔ Dynamicly load field types by @done(19-04-10 09:18)
        ✔ Create 2 field dummys - base, string, checkbox. @done(19-04-10 09:48)
        ✔ Tabs - switching tabs @done(19-04-10 11:13)
        ✔ Form submit - js @done(19-04-10 14:14)
        ✔ Fields settings @done(19-04-12 16:38)
            ✔ BaseComponent @done(19-04-12 08:49)
            ✔ Modal window @done(19-04-12 08:49)
            ✔ Save options_json, gql query @done(19-04-12 12:55)
            ✔ Custom settings component @done(19-04-12 12:55)
            ✔ Regexp setting for AxString @done(19-04-12 16:37)
        ✔ Validation @done(19-04-15 12:16)
            ✔ Field is reqired @done(19-04-15 12:15)
            ✔ Validate form - submit only valid @done(19-04-15 12:15)
            ✔ Errors in tabs and toggle drawer @done(19-04-15 12:15)
        ✔ Field is whole row @done(19-04-15 12:16)
    ✔ Form and home frogs @done(19-04-15 13:29)
        ✔ If form creatred -> redirect to form constructor @done(19-04-15 12:38)
        ✔ When first of field is added -> open tab @done(19-04-15 13:03)
        ✔ If field added -> focus name input @done(19-04-15 13:29)
        ✔ If tab added -> focus name input @done(19-04-15 13:29)
    ✔ AX-FIELDS @done(19-04-16 14:20)
        ✔ ax-base @done(19-04-10 09:49)
		✔ ax-string @done(19-04-10 09:49)
		✔ ax-text @done(19-04-15 18:55)
		✔ ax-num @done(19-04-15 20:40)
		✔ ax-checkbox @done(19-04-10 09:49)
		✔ ax-choise @done(19-04-16 14:20)
    ✔ GRID CONSTRUCTOR @done(19-05-14 12:49)
        ✔ Restore ax-grid @done(19-04-16 16:06)
        ✔ js-tree @done(19-04-17 10:39)
        ✔ Create default grid on form creation @done(19-04-17 11:47)
        ✔ GQL Schema and actions - @done(19-04-18 11:53)
            ✔ Add column @done(19-04-17 17:47)
            ✔ Change position @done(19-04-17 21:40)
            ✔ Delete column @done(19-04-17 21:40)
        ✔ GQL Schema - Add grid, update grid, delete grid @done(19-04-18 11:53)
        ✔ Toolbar for grids @done(19-04-23 17:13)
            ✔ Grid buttons leads to default grid @done(19-04-17 17:47)
        ✔ AXGRID @done(19-04-23 17:13)
            ✔ GQL - get grid data @done(19-04-19 10:07)
                ✔ Create and test simple type @done(19-04-19 01:20)
                ✔ Create and test dimple dynamic type @done(19-04-19 01:20)
                ✔ Create and test dynamic database type @done(19-04-19 01:20)
                ✔ Get grid info, then get make data query @done(19-04-19 10:07)
            ✔ Open form @done(19-04-23 15:08)
        ✔ Toolbar menu design @done(19-04-19 12:53)
        ✔ Update ax-grid on setting change @done(19-04-23 17:12)
        ✔ Row width @done(19-04-25 11:17)
        ✔ Filter @done(19-04-25 11:31)
        ✔ Sort @done(19-04-25 11:31)
        ✔ Qucik search @done(19-04-25 13:10)
        ✔ Settings @done(19-04-28 18:58)
            ✔ Quick search @done(19-04-28 18:46)
            ✔ Column resize @done(19-04-28 18:46)
            ✔ Filtering @done(19-04-28 18:46)
            ✔ Sorting @done(19-04-28 18:46)
            ✔ Open form @done(19-04-28 18:46)
            ✔ Actions @done(19-04-28 18:46)
            ✔ Flat mode @done(19-04-28 18:46)
            ✔ Row height @done(19-04-28 18:58)
            ✔ Pinned columns @done(19-04-28 18:58)
        ✔ AxGridSettings @done(19-04-30 08:41)
            ✔ Component @done(19-04-29 12:34)
            ✔ Popup @done(19-04-29 12:34)
            ✔ GQL mutation, query, action, vuex mutation. @done(19-04-29 12:34)
                ✔ Update @done(19-04-29 12:35)
                ✔ Delete @done(19-04-30 08:41)
        ✔ Grids list @done(19-04-30 08:41)
            ✔ Popup @done(19-04-29 19:05)
            ✔ Create @done(19-04-29 19:05)
        ✔ Get row data for form - ax form for specific guid @done(19-05-02 15:30)
        ✔ Reload schema on every edit @done(19-05-07 09:50)
        ✔ Cell is web-component @done(19-05-09 10:38)
        ✔ Server filter @done(19-05-11 22:58)
            ✔ Query builder @done(19-05-11 12:09)
            ✔ Dynamic GQL for grids @done(19-05-11 22:33)
            ✔ Filter num on button @done(19-05-11 22:58)
        ✔ Frogs @done(19-05-14 12:49)
            ✔ Grid data not loaded if user is coming form home @done(19-04-23 15:50)
            ✔ If icon or form name is changed -> form preview does not reload @done(19-05-12 10:15)
            ✔ axState is not created in database @done(19-05-12 10:16)
            ✔ Form drawer transition must accur only after everything loaded @done(19-05-14 09:15)
            ✔ If grid have two columns with same field - they have only one width @done(19-04-25 11:18)
            ✔ When less then 3 fields in AxForm - they do not flex @done(19-05-14 09:21)
            ✔ Problem in column positions @done(19-05-14 12:16)
            ✔ Remove media columns from grid constructor @done(19-05-14 12:49)
    ✔ WORKFLOW @done(19-06-11 13:37)
        ✔ Insert D3 sample and make it work @done(19-05-15 20:09)
        ✔ Create default workflow on form creation @done(19-05-16 14:13)
        ✔ Change sample - switch ids to guids @done(19-05-16 15:07)
        ✔ Hook d3 to default workflow @done(19-05-16 18:10)
        ✔ GQL actions - schema, query, vuex action, vuex setter @done(19-05-20 20:00)
        ✔ Create status on double click @done(19-05-21 10:51)
            ✔ State name must be unique @done(19-05-20 19:54)
        ✔ Create self-action @done(19-05-21 10:51)
            ✔ Update action in default workflow @done(19-05-21 10:22)
            ✔ Create "update" action on state creation @done(19-05-21 10:51)
            ✔ Create "update" action on drag to self @done(19-05-21 10:51)
            ✔ Delete confirmation to default workflow @done(19-05-21 10:51)
        ✔ Create action on drag @done(19-05-20 19:58)
        ✔ Roles list @done(19-05-21 16:32)
            ✔ Default Admin role in default workflow @done(19-05-21 13:10)
            ✔ Role list @done(19-05-21 13:45)
            ✔ Create role button @done(19-05-21 16:32)
        ✔ Modals dummys @done(19-05-22 09:35)
            ✔ Role modal @done(19-05-22 09:35)
            ✔ Action modal @done(19-05-22 09:35)
            ✔ State modal @done(19-05-22 09:35)
        ✔ Delete actions @done(19-05-22 21:26)
            ✔ Delete role @done(19-05-22 21:26)
            ✔ Delete state @done(19-05-22 21:26)
            ✔ Delete action @done(19-05-22 21:26)
        ✔ Role modal @done(19-05-23 11:01)
            ✔ Change name @done(19-05-23 11:01)
            ✔ Delete @done(19-05-23 11:01)
        ✔ Add role to state @done(19-05-23 15:02)
        ✔ Add role to action @done(19-05-23 15:02)
        ✔ Highlite roles on mouseover @done(19-05-23 21:01)
        ✔ State modal @done(19-05-28 16:39)
            ✔ Name @done(19-05-24 12:45)
            ✔ Delete - all connected actions must be deleted @done(19-05-24 12:45)
            ✔ Roles - remove @done(19-05-25 18:27)
            ✔ Permissions
                ✔ Permission component @done(19-05-25 23:52)
            ✔ State name must be unique @done(19-05-28 16:39)
        ✔ Admin default permissions @done(19-05-27 11:11)
            ✔ On state creation -> add admin role @done(19-05-27 10:23)
            ✔ On field cration -> add admin role to @done(19-05-27 10:23)
            ✔ On action creation -> add admin @done(19-05-27 11:11)
            ✔ Cant rename or delete admin group @done(19-05-27 11:11)
        ✔ Action modal @done(19-05-28 11:08)
            ✔ Name @done(19-05-27 11:39)
            ✔ Roles - remove @done(19-05-27 14:13)
            ✔ Icon @done(19-05-27 15:31)
            ✔ Code @done(19-05-28 10:27)
            ✔ Delete @done(19-05-28 11:08)
    ✔ RELATION FIELDS @done(19-06-05 17:10)
		✔ multiple pop-ups @done(19-04-16 14:41)
        ✔ ax-1tom @done(19-06-04 09:25)
            ✔ Settings @done(19-05-29 10:23)
            ✔ Quicksearch - @done(19-05-30 08:52)
                ✔ graphene query (sql_quicksearch) @done(19-05-29 16:46)
                ✔ apolo query @done(19-05-29 16:46)
            ✔ Frog - if grid added -> you must update home.js data @done(19-05-30 09:05)
            ✔ Frog - if form and grid not selected -> display message @done(19-05-30 09:46)
            ✔ Grid select is must @done(19-05-30 11:23)
            ✔ Open form click -> modal @done(19-05-30 19:50)
            ✔ Select from grid button @done(19-06-03 21:21)
                ✔ Make AxForm and AxGrid closeble @done(19-05-30 22:00)
                ✔ Make unique modal name form each AxForm and AxGrid @done(19-05-30 21:46)
                ✔ toM mode of AxGrid - select column, no actions, select event @done(19-06-03 21:21)
                    ✔ Checkbox and emit action @done(19-06-03 16:40)
                    ✔ Quicksearch GQL with ids argument @done(19-06-03 21:21)
            ✔ Error - enable quicksearch on grid, switch grids. Quicksearch not avalible in grid. @done(19-06-04 08:58)
            ✔ Required error @done(19-06-04 09:02)
            ✔ Hint @done(19-06-04 09:10)
            ✔ Error when adding field @done(19-06-04 09:25)
		✔ ax-mtom @done(19-06-04 15:26)
        ✔ ax-mtom-table @done(19-06-05 15:01)
            ✔ Field name and icon @done(19-06-05 10:05)
            ✔ GQL - filter argument @done(19-06-05 14:30)
            ✔ Select button @done(19-06-05 14:30)
            ✔ Delete button column @done(19-06-05 14:30)
            ✔ Hint, required @done(19-06-05 15:01)
    ✔ ACTION ENGINE @done(19-06-14 10:10)
        ✔ Display action buttons in grid and form @done(19-06-05 20:27)
        ✔ Do action GQL mutation @done(19-06-06 19:27)
            ✔ Insert actions @done(19-06-06 16:43)
            ✔ Update actions @done(19-06-06 19:26)
            ✔ Delete action @done(19-06-06 19:26)
        ✔ Error -> create 1to1, change grid name, come back to 1to1 settings - grid name did not change @done(19-06-07 19:20)
            ✔ Update all relation fields options on grid or form rename @done(19-06-07 19:20)
        ✔ Update form on action @done(19-06-07 21:29)
        ✔ Update grid on action (without websockets) @done(19-06-07 21:40)
        ✔ Close modal @done(19-06-07 21:40)
        ✔ Confirm text @done(19-06-09 13:37)
        ✔ Error -> state delete does not delete actions in workflow designer @done(19-06-09 13:55)
        ✔ All state. actions from all state. @done(19-06-09 16:19)
        ✔ Error -> Table in flat mode displayed wrong @done(19-06-09 17:14)
        ✔ Change default icon for update @done(19-06-10 16:27)
        ✔ AxGrid update subscribtion. AxGrid updated on the fly. @done(19-06-11 11:31)
            ✔ Grid is subscribed to doAction. If recieved -> will reload data. @done(19-06-11 11:31)
            ✔ Option in grid constructor @done(19-06-11 11:31)
        ✔ AxForm update subscribtion. Message must apear. @done(19-06-11 13:25)
            ✔ Form is subscribed to doAction. If recieved -> checks guid. @done(19-06-11 13:25)
        ✔ Run python code on action @done(19-06-12 10:12)
            ✔ Hello world @done(19-06-11 14:15)
            ✔ Item is avalible in action @done(19-06-11 14:15)
            ✔ Message from python action @done(19-06-11 18:36)
                ✔ Info @done(19-06-11 18:36)
                ✔ Error @done(19-06-11 18:36)
            ✔ python action can modify item data @done(19-06-11 21:07)
            ✔ python action can abort action execution @done(19-06-11 21:44)
            ✔ Test api @done(19-06-12 10:12)
        ✔ Error -> if form not closed - subscribtion popup appears. Throw modal guid. @done(19-06-12 11:19)
        ✔ Run fields python code @done(19-06-12 16:43)
        ✔ Error -> 1tom field saved incorrectly if updated multiple times @done(19-06-12 21:38)
        ✔ Run 1toM python code @done(19-06-13 11:42)
            ✔ Make select with left join @done(19-06-13 11:42)
        ✔ Delete of dict items for tom field?? @done(19-06-13 17:03)
        ✔ Error -> actions in form preview and 1tomTable @done(19-06-13 18:25)
        ✔ Try 1to1, 1tom to self! @done(19-06-13 22:44)
        ✔ Error -> scroll is disturbed in AxGird after subscription update @done(19-06-13 22:47)
        ✔ 1tomTable -> item delete button @done(19-06-14 09:54)
    ✔ COMPLEX FIELDS @done(19-07-04 10:24)
        ✔ Edit history (Logging) @done(19-06-18 10:39)
        ✔ Error -> On insert - wrong behaiver. new guid set wrong. tom fields are emtyed. @done(19-06-18 10:39)
        ✔ Filesystem Files @done(19-06-27 21:47)
            ✔ Python uploader @done(19-06-26 14:47)
                ✔ Files saved to /tmp/guid/file-name.jpg @done(19-06-25 10:30)
            ✔ AxFiles.vue @done(19-06-27 19:15)
                ✔ File data stored as json - [{guid, name, metadata, size}] @done(19-06-26 10:41)
                ✔ List of files displayed with icons @done(19-06-26 11:19)
                ✔ Remove items @done(19-06-26 11:33)
                ✔ Field is reqired @done(19-06-27 19:15)
            ✔ AxFilesSettings @done(19-06-27 18:49)
                ✔ maxFileSize @done(19-06-27 18:11)
                ✔ maxNumberOfFiles @done(19-06-27 18:11)
                ✔ minNumberOfFiles @done(19-06-27 18:11)
                ✔ allowedFileTypes @done(19-06-27 18:11)
                ✔ Allow webcam @done(19-06-27 18:49)
            ✔ AxFiles.py @done(19-06-26 14:47)
                ✔ after insert and update - Files are moved to /form-guid/row-guid/file-guid/file-name.jpg @done(19-06-26 13:59)
                    ✔ Deletes all files that are not in json @done(19-06-26 13:59)
                ✔ after delete - remove all files @done(19-06-26 14:36)
                ✔ if form removed - remove all files @done(19-06-26 14:47)
            ✔ File viewer @done(19-06-27 13:51)
            ✔ Scheduler @done(19-06-27 21:46)
                ✔ Every hour scheduller is fired, it runs throw /tmp dir and finds directories that must be deleted (modified date > expiration date) @done(19-06-27 21:46)
            ✔ Error -> add hint @done(19-07-01 00:22)
        ✔ Database Image Crop @done(19-07-01 15:08)
            ✔ File uploader @done(19-07-01 15:08)
                ✔ AxImageCropDb, inline uppy, @done(19-06-30 11:40)
                ✔ After select -> hide uppy, show cropper @done(19-06-30 11:40)
                ✔ Feed selected file to cropper, even if webcam @done(19-06-30 11:40)
            ✔ Image crop @done(19-07-01 15:08)
                ✔ Upload cropped image to tmp @done(19-06-30 18:58)
                ✔ before_update -> put image data to field. Read file, @done(19-06-30 23:26)
                ✔ BLOB type in dialect. Does not returned on select. WHERE LENGTH(blob_column) IS NOT NULL @done(19-06-30 23:26)
                ✔ If upload not finished - show error. cant submit form. @done(19-07-01 00:12)
                ✔ Required @done(19-07-01 00:12)
                ✔ Hint @done(19-07-01 00:22)
                ✔ If image is less then 100px -> show only icon, increase zoom speed @done(19-07-01 13:47)
            ✔ View @done(19-07-01 15:08)
                ✔ thumbnails created dynamicly, once for guid, on view @done(19-06-30 23:26)
            ✔ Delete @done(19-06-30 23:26)
            ✔ Settings @done(19-07-01 15:08)
                ✔ Width @done(19-07-01 01:00)
                ✔ Height @done(19-07-01 01:00)
                ✔ Border radius @done(19-07-01 13:47)
                ✔ Is circle @done(19-07-01 13:47)
        ✔ Numeration @done(19-07-03 18:11)
            ✔ AxField @done(19-07-03 12:23)
                ✔ Copy link button @done(19-07-03 12:23)
            ✔ AxSettings @done(19-07-03 11:17)
                ✔ AxNumSettings @done(19-07-02 13:48)
                ✔ run python code before_insert @done(19-07-02 19:40)
                ✔ Key must be not null @done(19-07-03 11:17)
            ✔ _ax_metrics stores counter with 'key'. It can be db_name, guid. This values are accesible in AxNum python code. @done(19-07-02 20:25)
                ✔ guid, key [ax_counter_123-123-123-123-312], value @done(19-07-02 20:25)
            ✔ FormViewer @done(19-07-03 11:18)
                ✔ Component + route @done(19-07-03 09:07)
            ✔ AxForm is accessed by url using AxNum and guid @done(19-07-03 17:48)
                ✔ Guid params takes guid AND axNum @done(19-07-03 10:03)
                ✔ AxForm - If row not found -> display empty message @done(19-07-03 16:00)
                ✔ AxForm - after delete -> display empty message @done(19-07-03 17:38)
                ✔ After action -> display toast in standalone form @done(19-07-03 17:48)
            ✔ Error -> Delete field, column in grid stays @done(19-07-03 18:11)
    ✔ WINEPOWER MILESTONE @done(19-09-13 17:58)
        ✔ Comment every def and gql method like ax_misc @done(19-07-05 10:24)
        ✘ Try catch for every vue method @cancelled(19-07-05 11:23)
        ✔ Fix ALL pylint and jslint errors, warnings and info @done(19-07-05 11:54)
        ✔ Try pip installation (without alembic migration) @done(19-07-05 13:40)
        ✔ Try app engine installation @done(19-07-07 13:34)
            ✔ Uploads dir must be taken from app.yaml @done(19-07-07 13:34)
        ✔ Code experience 1 @done(19-08-04 16:12)
            ✔ Code full screen, ctrl+s @done(19-08-03 10:53)
            ✔ Code running in separate loop @done(19-08-03 10:53)
            ✔ Schedule code job @done(19-08-03 10:54)
            ✔ Long actions and console action @done(19-08-04 15:07)
                ✔ front: Click -> Disable actions, show spinning @done(19-08-04 15:07)
                ✔ back: Check if action is already running. If yes return message @done(19-08-04 15:07)
                ✔ front: (maybe) Hide spinner if specific error. @done(19-08-04 15:07)
                ✔ front: If action finished -> the form will be reloaded and new new actions will be shown @done(19-08-04 15:07)
                ✔ front: If gql timeout -> We need to reload form on AxAction subscribtion. @done(19-08-04 15:07)
                    ✔ If running action_guid and modal_guid are same -> reload form and (maybe) show messages. @done(19-08-04 15:07)
                ✔ If recieved console sub -> open console. @done(19-08-04 15:07)
                ✔ If console was opened - it can be opened by clicking on action btn. (maybe) Show console icon in action @done(19-08-04 15:07)
            ✔ Engine @done(19-08-04 16:12)
                ✔ Lock rows that are already performing actions. @done(19-08-04 16:12)
                ✔ Error when someone wants to execute action on blocked row. @done(19-08-04 16:12)
        ✔ PostgreSQL support @done(19-08-06 10:21)
        ✔ Two working versions on same machine - sqlite + postgre @done(19-08-06 18:50)
            ✔ Check if settings works with sqlite file path @done(19-08-06 18:50)
            ✔ Publish to pypi, install, run sqlite version. @done(19-08-06 18:50)
    ✔ Working Winepower.ru on postgre @done(19-09-13 17:57)
            ✔ Upload data object to yandex @done(19-08-11 10:22)
            ✔ Parse new wineart catalog @done(19-08-12 14:24)
            ✔ Install new AX version @done(19-08-12 14:24)
            ✔ Upload uploads folder @done(19-08-12 14:24)
            ✔ winepower vue works locally using vps backend @done(19-08-12 14:24)
            ✔ Upload winepower vue as data object @done(19-08-12 14:29)
            ✔ Configure winepower.ru domain @done(19-08-15 15:30)
            ✘ Backup automation @cancelled(19-09-13 17:57)
        ✔ Errors @done(19-09-07 15:22)
            ✔ Check on small screen - everything must show properly @done(19-08-12 14:30)
            ✔ Take uploads folder from app.yaml @done(19-08-18 11:16)
            ✔ App yaml must be generateed @done(19-09-02 10:21)
            ✔ Clean build folder on pypi build @done(19-09-02 10:40)
            ✔ 1tom_view not working + 1tom quicksearh not working! @done(19-09-02 11:11)
            ✔ You can rename axState @done(19-09-02 13:58)
            ✔ Action drag on update action @done(19-09-02 14:37)
            ✔ Check if app have access to uploads dir. @done(19-09-02 14:59)
            ✔ Output exception to AxAction terminal @done(19-09-02 16:08)
            ✔ If someone makes create action, the notification is poped up in constructor! @done(19-09-02 17:50)
            ✔ Ax1to1 - not updated after action, needs reload @done(19-09-02 18:28)
            ✔ AxRoleFieldPermission - takes too much data. Make permissions on tabs. @done(19-09-03 16:01)
            ✔ How to know guid and axNum inside insert action? @done(19-09-07 10:18)
            ✔ Action is taking long, console is working. But item is not refreshed. @done(19-09-07 12:14)
            ✔ favicon @done(19-09-07 12:14)
            ✔ If action performed - message subscribtion is dubbled @done(19-09-07 15:22)
        ✔ Reuired fetures @done(19-09-13 17:57)
            ✔ Echo for monit restart @done(19-08-31 10:03)
            ✔ Refresh in AxGrid @done(19-09-07 15:36)
            ✔ Email sender - settings from app.yaml, separete function. @done(19-09-07 18:36)
            ✔ AxGrid takes python code to generate SQL and arguments @done(19-09-10 10:49)
                ✔ Enter and save python code with sql query @done(19-09-09 12:09)
                ✔ grid schema exec to get sql query @done(19-09-09 12:09)
                ✔ grid schema takes arguments that used in query @done(19-09-09 18:23)
                ✔ AxGrid takes arguments that are passed to gql @done(19-09-10 10:49)
            ✔ AxHtml @done(19-09-10 18:48)
                ✔ Field components @done(19-09-10 13:02)
                ✔ Python code is saved @done(19-09-10 18:47)
                ✔ Python code is runned before form is displayed. Html displayed. @done(19-09-10 18:47)
            ✔ Upgrade AxNum - form values in python code @done(19-09-10 18:48)
            ✔ Upgrade winepower ax version @done(19-09-12 11:13)
            ✔ Make npm run serve faster! @done(19-09-12 12:32)
            ✔ Update all npm @done(19-09-13 10:49)
            ✔ Update all pip libs @done(19-09-13 11:13)
            ✔ Frogs @done(19-09-13 17:57)
                ✔ code save toast z-index @done(19-09-13 11:45)
                ✔ Field drag - open tree @done(19-09-13 12:23)
                ✔ Tree style - branch margin @done(19-09-13 12:45)
                ✔ If no rows in AxGrid - loading is shown @done(19-09-13 13:02)
                ✔ Try russian in db_name field @done(19-09-13 17:57)
            ✔ Discover postgre connection build up @done(19-09-13 17:03)
    ✔ USERS @done(19-09-24 09:19)
        ✔ Choose lib @done(19-09-15 08:35)
        ✔ Sign in form @done(19-09-15 08:35)
        ✔ Auth for gql @done(19-09-18 19:05)
            ✔ Auth and store tokens @done(19-09-16 13:53)
            ✔ Send apollo gql requests with tokens in headers @done(19-09-17 09:29)
            ✔ Inject user in graphql view, get user guid @done(19-09-17 09:29)
            ✔ If token recieved and it is not valid -> 401 -> client must retry @done(19-09-17 17:48)
            ✔ If token not recieved -> anon user @done(19-09-17 18:00)
            ✔ Admin. If no access token in storage -> redirect to Signin. @done(19-09-18 10:30)
            ✔ If refresh token failed -> delete all tokens from cookies and vuex, redirect to Signin. @done(19-09-18 10:30)
            ✔ Admin -> Logout @done(19-09-18 10:30)
            ✔ Login backlink @done(19-09-18 19:05)
        ✔ Auth for routes @done(19-09-18 10:30)
        ✔ User model @done(19-09-19 09:42)
        ✔ All Users @done(19-09-22 21:16)
            ✔ Insert, update, delete user schema @done(19-09-19 17:35)
            ✔ UsersModal - add, update, delete user @done(19-09-19 23:13)
            ✔ View with ag-grid @done(19-09-19 23:13)
            ✔ Custom gql query @done(19-09-19 23:13)
        ✔ Groups list @done(19-09-22 21:16)
            ✔ Groups gql query @done(19-09-22 21:16)
            ✔ Jstree @done(19-09-22 21:16)
            ✔ User Group modal @done(19-09-22 21:16)
        ✔ Roles modal - add users @done(19-09-23 15:17)
        ✔ Create default users on install @done(19-09-23 16:16)
        ✔ auth.py takes users from database @done(19-09-23 22:41)
    ✔ PERMISSION SYSTEM @done(19-10-01 20:35)
        ✔ When user logs in - his perms are stored in cache. form -> perms list @done(19-09-26 17:34)
        ✔ GraphQL authorisation @done(19-09-18 18:13)
        ✔ Every GQL mutation needs permissions @done(19-09-30 13:06)
            ✔ All admin routes checks if user is admin. Is_admin is stored in jwt. @done(19-09-27 22:26)
                ✔ Redirect to signin and reset store if not admin @done(19-09-27 22:32)
            ✔ Select one schema authorisation. (formData) @done(19-09-26 17:34)
            ✔ Select all schema authorisation. @done(19-09-29 07:40)
            ✔ Action permissions - fields permissions @done(19-09-29 10:00)
            ✔ Check if user can perform action @done(19-09-29 12:59)
            ✔ File viewer permissions @done(19-09-30 13:06)
        ✔ AxForm fields permissions @done(19-09-27 17:41)
        ✔ All fields must have isReadonly param @done(19-09-27 17:41)
        ✔ All users group @done(19-10-01 13:37)
        ✔ Signin - logout button, if user logged in @done(19-10-01 13:37)
        ✔ Everyone group @done(19-10-01 17:15)
            ✔ hide rows without values in AxGrid @done(19-10-01 17:15)
            ✔ Form @done(19-10-01 15:14)
            ✔ Grid @done(19-10-01 15:14)
            ✔ Actions @done(19-10-01 17:14)
        ✔ Multiple devices signin - add deviceGuid to refresh_token @done(19-10-01 20:36)
        ✔ Frogs @done(19-10-01 20:35)
            ✔ form.js -> 'All fields' must be from locale @done(19-09-27 16:19)
            ✔ AxAction when no fields are visible @done(19-09-27 16:43)
            ✔ Check fields errors @done(19-09-27 16:15)
                ✔ Ax Changelog @done(19-09-27 15:25)
                ✔ Db crop @done(19-09-27 16:15)
                ✔ 1toM, 1tomTable @done(19-09-27 14:37)
                ✔ Ax Files @done(19-09-27 14:37)
            ✔ GQL schema not updated. If no field added - error in AxGrid @done(19-09-27 17:31)
            ✔ Start state disapears after update @done(19-09-27 18:01)
            ✔ AxForm header is clickable - opens form in new window @done(19-09-27 18:49)
            ✔ Remove default admin role @done(19-09-27 19:22)
                ✔ No roles message @done(19-09-27 19:22)
                ✔ Delete roles @done(19-09-27 19:22)
            ✔ If server was reloaded -> user can log-in because access_token is not expired, but cache is empty. @done(19-09-27 19:36)
                ✔ On retrive user - check if user in cache - is false - write to cache @done(19-09-27 19:37)
            ✔ Auth for uppy/tus upload @done(19-09-27 20:05)
            ✔ Add GQL query for current user data @done(19-09-27 20:40)
            ✔ In yandex brawser - if not 401 - no redirect happens @done(19-10-01 17:45)
            ✔ Insert action if no fields visible @done(19-10-01 17:16)
    ✔ PAGES DESIGNER @done(19-10-16 16:57)
        ✔ Routes work with static content @done(19-08-15 14:09)
        ✔ Routes take path from app.yaml so it can be configured @done(19-08-15 16:48)
        ✔ Model @done(19-10-02 19:33)
        ✔ GQL schema @done(19-10-02 20:16)
        ✔ Designer @done(19-10-07 11:13)
            ✔ First drawer @done(19-10-07 11:05)
                ✔ Jstree with pages @done(19-10-06 17:30)
                ✔ Create page @done(19-10-06 17:30)
                ✔ Open tree on load @done(19-10-07 11:05)
                ✔ Page modal @done(19-10-06 23:36)
                    ✔ Name @done(19-10-06 23:35)
                    ✔ Permissions - users and groups @done(19-10-06 23:36)
            ✔ Second drawer @done(19-10-07 11:05)
                ✔ Add drawer @done(19-10-02 21:02)
                ✔ monaco editor @done(19-10-02 21:02)
                ✔ Redraw monaco on resize @done(19-10-02 21:30)
                ✔ Update gql on ctrl+s @done(19-10-06 23:36)
        ✔ Vue application - WPA @done(19-10-16 16:56)
            ✔ Install @done(19-10-12 07:48)
                ✔ Roboto, awesome @done(19-10-08 10:26)
                ✔ Apollo, gql - make pages query @done(19-10-10 18:13)
                ✔ Locale @done(19-10-11 11:31)
                ✔ Cookies @done(19-10-11 11:31)
            ✔ Drawer - drag open @done(19-10-10 18:14)
            ✔ Menu - tree from store. Opens pages. @done(19-10-11 09:27)
            ✔ GQL @done(19-10-11 11:32)
                ✔ Select page tree @done(19-10-06 17:29)
                ✔ Select page @done(19-10-06 17:30)
            ✔ Markdown to html @done(19-10-11 13:14)
            ✔ User sign-in, User logout @done(19-10-11 11:31)
            ✔ SSL @done(19-10-15 20:07)
                ✔ Install mkcert @done(19-10-12 09:43)
                ✔ app.yaml sanic ssl options @done(19-10-12 09:43)
            ✔ Check on mobile device @done(19-10-15 20:07)
            ✔ Page permissions @done(19-10-15 21:51)
            ✔ FROGS @done(19-10-16 16:56)
                ✔ If signin failed - beutiful message, not console log @done(19-10-15 22:21)
                ✔ Pages position in jstree must be same for drawer menu @done(19-10-16 14:25)
                ✔ Pages by url @done(19-10-16 16:52)
                ✔ Only one index page @done(19-10-16 16:56)
    ✔ FIELDS, round 1 @done(19-10-18 10:14)
        ✔ Email @done(19-10-16 17:47)
        ✔ Telephone number @done(19-10-16 17:47)
        ✔ Decimal @done(19-10-16 19:36)
        ✔ Int Slider @done(19-10-16 20:35)
        ✔ Switch @done(19-10-16 20:41)
        ✔ Date @done(19-10-17 12:24)
        ✔ Users @done(19-10-17 15:14)
    ✔ GLOB FROGS round 1 @done(19-10-22 08:06)
        ✔ AdminHome - if no forms created - output message @done(19-10-17 20:07)
        ✔ tus.py max file size must be from app.yaml @done(19-10-17 21:00)
        ✔ SSL - check uppy @done(19-10-17 21:00)
        ✔ Error toasts everywhere @done(19-10-18 10:11)
        ✔ 1toM in graphql dynamic schema @done(19-10-21 22:51)
    ☐ MARKETPLACE
        ✔ New app modal - prompt install data @done(19-10-24 22:12)
        ✔ GQL mutation - create application. For each ax form -> @done(19-11-03 16:27)
            ✔ Creates files in tmp @done(19-10-28 11:39)
            ✔ Gzips it @done(19-11-03 16:27)
        ☐ Install application from archive
        ☐ Update application from archive
    ☐ PHOTO PROJECT
    ☐ GLOBAL FROGS
        ☐ Not working user selection in postgre
        ☐ Clear ag-grid filters
        ☐ 1tom gql schema error - 1to1 and 1tom in same form
        ☐ form -> field db_name focus on tab not working
        ☐ If form created - you cant create 1to1 to this form right after
        ☐ In yandex brawser - No modal in grid view
        ☐ Different sorting and filtering for different types
        ☐ Add clould logger for python and vue
        ☐ Product usage statistics
        ☐ Redirect all http to https
    ☐ FIELDS round 2
        ☐ 2D radio survey
        ☐ Yandex payment *
        ☐ Radio
        ☐ Tags input
        ☐ WYSIWYG
        ☐ Markdown editor
        ☐ Code highlite
        ☐ Approval path
        ☐ Comments *
    ☐ INSTALLATION
    ☐ FEATURES
        ☐ Admin home widgets
            ☐ Stack-overflow questions
            ☐ Featured apps
            ☐ Global message - patreon donation
        ☐ Role and user based server-filter
        ☐ Default name field. 1tomLabel = {name}
        ☐ Every modal must be moved a litle bit
        ☐ User registration -> always throw email (Ax does not without smtp??)
    ☐ PERFORMANCE TEST
        ☐ Redis integration
        ☐ 4 workers, cache problem, schema reload
        ☐ Give huge load - stress test
    ☐ LICENSE GENERATION
        ☐ If not licensed - put watermark with logo and link everywhere
    ☐ TUTORIAL
        ☐ Each page and field have help modal with gifs
    ☐ LANDING
        ☐ Ax pages site - beutiful landing
        ☐ Github readme with docs
    ☐ METRICS
        ☐ Ax metrics
        ☐ Landing metrics
    ☐ START REACHING OUT
        ☐ Indie hackers post - intro and ask how to maximise user reach
        ☐ Friends - vs, facebook
    ☐ SET MEDIA LIFECYCLE
        ☐ Research list of media - register in every media
        ☐ Automate - write, translate, post, metrics
        ☐ Set AX fetaures list
        ☐ Set AX application request
        ☐ Set media articles list
        ☐ Set email list
    ☐ SET ACCOUNTING
        ☐ Самозанятый
        ☐ Yandex.Kassa registration
        ☐ Yandex.Kassa field
        ☐ User registration app for marketplace
        ☐ Patreon
    ☐ CYPRESS TESTS FOR MAIN FUNCTIONS
    ☐ ESTABLISH CI
        ☐ Each commit runs tests - installs from pip, runs cypress tests
        ☐ Start versionning
        ☐ Publishes to google code 
        ☐ Gae autodeploy
        ☐ Each new version comes with patch
    ☐ START SCALING AND IMPROVING


AX 0.3:
    ☐ ACTION EXPERIENCE
        ✔ Feature -> ctrl+s in code editor saves action without closing @done(19-08-03 10:49)
        ✔ Feature -> full screen code mode ctrl+enter @done(19-08-03 10:49)
        ☐ Feature -> Relation forms (1to1 1tom) must be avalivle via GQL query - https://github.com/graphql-python/graphene/issues/798
        ☐ Logging code 
        ☐ Code highlite and autocomplete
            ☐ Monaco language server, language client
            ☐ Code snippets
        ☐ Think of ст, фт, пси - how to with Ax. How to update existing application?
        ☐ While code in fullscreen mode - the debugger is avalible. You can choose some row from db_table and run action. The result will be displayed in modal. The database will not be modified.
        ☐ Erros in acction that was launched within actions
        ☐ Action can be canceled. From console or on button click




BEFORE LAUNCH:
    ☐ Landing page
    ☐ Documentation
        ☐ Sphninx in repo -> https://gist.github.com/GLMeece/222624fc495caf6f3c010a8e26577d31
        ☐ Gitbook -> https://www.gitbook.com/?t=1                
        ☐ Ax Pages
    ☐ Lincese key generation, desribution and 


    
Additional versions:
    ☐ Sass
        ☐ Деплой в App Engine через Market
    ☐ Сборка docker image и деплой куда-то
    ☐ Kubernates

    
=============================================================================================



FROGS TODOS:
    ✔ Discover why ripple effects are not working in chrome @done(19-02-13 07:24)
    ✔ Minification not working with vue-custom-element. https://github.com/karol-f/vue-custom-element/issues/159 @done(19-03-01 19:34)
    ✔ Vuetify - include only components that are used @done(19-03-01 02:00)
    ✔ AxFrom - size transition caouses a ton of resize events that are captured by handleResize @done(19-04-17 09:37)
    ✔ Error -> if you click fast enoth - setRedirectUrl action does not work @done(19-06-07 16:55)
    ✔ If field is virtual of readonly - hide hint and required settings @done(19-07-02 12:39)
    ✔ Change AsyncioPubsub to production pubsub implementation @done(19-05-02 09:37)
    ✔ QueuePool limit of size 20 overflow 0 reached, connection timed out, timeout 30 @done(19-09-13 17:59)
        ✔ Display number of connections @done(19-09-01 10:23)
    ✔ Roboto font not working with webpack. Replace CDN dependency @done(19-10-08 10:24)
    ✔ Replace CDN dependency for wont-awesome @done(19-10-08 10:24)
    ✔ Disable maximise on double click on split-panes @done(19-10-18 11:55)
    ✔ Cant delete last tab and last field in AxForm @done(19-10-18 12:01)
    ✔ Close icon in form values preview @done(19-10-18 12:02)
    ✔ Long names for form tabs - limit is too small! @done(19-10-18 12:17)
    ✔ Del key when editing field names - tryes to delete whole field @done(19-10-18 17:39)
    ☐ IMPORTANT 
        ☐ Database is locked in sqlite `[IMPORTANT]`
        ☐ Only 1 worker is working - test with 4 workers `[IMPORTANT]`
            ☐ Pubsub probably wont work, move to redis?
            ☐ GQL schema reset will not work - edit throw pubsub?
            ☐ Cache and record labels probavly wont work - move to redis?
    ☐ MODERATE
        ☐ Python locale - change hard-coded english words. Pages, Roles names.
        ☐ if field removed - remove all files from /uploads/from_files
        ☐ What if database already exists?            
        ☐ Tom name -> need to check if fields in {{}} exists
        ☐ If grid schema was changed, already loaded ax-grid does not change. Even if refresh is pressed.
        ☐ If error accured while executing field before/after code -> the exception must be seen in modal for user
        ☐ Form constructor -> preview form for different role/state
    ☐ SOMEDAY
        ☐ Discover minimum window size for ax admin. Output warning if window is less then minimum
        ☐ Webpack - additional minification
        ☐ Roboto - load only one, include in js
        ☐ Font-awesome - only regular, include in js
            ☐ https://github.com/FortAwesome/vue-fontawesome
            ☐ https://codepen.io/Goji/pen/mLKMVR
        ☐ Include images in js
        ☐ Margins in ax-form and ax-grid must be responsive. 0% on mobile
        ☐ Do Lazy loading with webpack - load grid first, then form.
        ☐ Remember opened nodes is JsTree
        ☐ If form does not exist, but someone entered via url - must be error
        ☐ Form constructor - when field is dragged to folder - the folder is focused edited and selected
    ☐ LATER MAYBE
        ☐ Websockets not working in App Engine Standard! https://issuetracker.google.com/issues/35886348
            ☐ If app engine -> disable Web-sockets



FEATURES:
    ✔ Call workflow actions from graphql. Dbname for action. @done(19-10-16 15:17)
    ✔ Toasts in ax-grid and ax-form without admin (idie) @done(19-10-18 17:52)
    ✔ Arguments for doAction. Can be used in python code. @done(19-10-16 15:18)
    ✔ Conditions in workflow (done throw action abort) @done(19-10-18 18:01)
    ☐ PRO VERSION
        ☐ Infinite scroll in AxGrid
            ☐ Setting in constructor
            ☐ Change ag-grid with getData() - https://www.ag-grid.com/javascript-grid-infinite-scrolling/
            ☐ Schema takes view params.
            ☐ Add <ax_filters> and <ax_order> to grid query    
        ☐ AxGrid constructor - custom fields. Tree with column types - dragged to grid and enter name and db_name. Db_name must be specified in query.
        ☐ Админ дает доступ пользователю или группе на Папку в списке объектов.
            ☐ Если доступ есть - пользователь может в этой папке создавать объекты и менять уже созданные
        ☐ Users -> List of Substitute users
        ☐ URL for executing actions. Can be placed inside emails
        ☐ Pages -> Unread message counter
        ☐ AxGrid -> Right-click menu in grid, copy action, Export to excel
        ☐ Group action. Multiple row can be selected in AxGrid to perform same action.
        ☐ Resources monitoring
        ☐ Timers in workflow
        ☐ Allow one level of sub-tabs for AxForm - https://vuetifyjs.com/en/components/lists#expansion-lists
    ☐ MODERATE
        ☐ Detect unsuported browsers and print error
        ☐ Custom error pages
        ☐ Quicksearch in 1tom -> must not be case sansitive
        ☐ Grid constructor - place * near required field in jstree
        ☐ All activities in admin are logged
        ☐ Pages -> Page edit subscription
        ☐ Default tab at state settings
        ☐ Ax-Field - tomConnected - Connected lists. Choose one to reveal next.
        ☐ AxGrid, AxForm -> auth needed setting
        ☐ AxGrid, AxForm -> sign in dialog when not logged and anon icon if showing    
        ☐ GraphQL samples for - form, grid, action
            ☐ GraphQL copy help snippets - action, grid
        ☐ MtoM Create new record inside inline tom field? Added to table and added to field value
        ☐ Marketplace -> Application catalog
        ☐ Marketplace -> Install from git repository (pages use gitcdn)
    ☐ THINK THROW, BIG
        ☐ Billing for Sass services that run ontop of AX
        ☐ Custom additional form in action execution. Create form and set it as action input.
        ☐ Offline work for Pages. AxGrid, AxForm data is cached in localstorage
        ☐ Backup mechanism
        ☐ GAuth - зачем?
        ☐ Javascript in actions - executed after action is complete. Is param of ax-form
        ☐ One database can be used for authorisation of multiple AX installations
        ☐ Plugin system, custom fields system
            ☐ Подключается поле через lazy-loading - unpkg.com
    ☐ SOMEDAY
        ☐ AxForm - make dynamic form header. If wide form - it is in drawer. If it is slim - it is in form.
        ☐ Form constructor -> delete field by drag-drop
        ☐ Form constructor -> save entered values on form preview
        ☐ favico for each form must be different - same as font-awesome icon
        ☐ Workflow constructor - hints onmouseover on states and actions. Description is displayed.
        ☐ Icons of roles in workflow constructor
        ☐ Tus upload -> concationation
        ☐ Tus upload -> checksum    
        ☐ Ax and pages must use same node_modules
        ☐ Form and grid constructors can be used with keyboard only
        ☐ Pages data is stored in cache
        ☐ Page title in page-designer in toolbar
        ☐ If js exception - show toast with rerort button
    ☐ LATER MAYBE    
        ☐ Use simple grid (no need for 700kb ag-grid)
        ☐ Remember the width of constructor drawers in cookies



==============================================================================================


Критерии работы экосистемы:
    ✔ Файловая структура - Модель, Контроллер @done(19-02-26 16:22)
    ✔ Система билда - минификация, условная загрузка @done(19-03-07 21:44)
    ✘ Должна быть сгенерирована авто-документация по методам python @cancelled(19-02-26 16:22)
    ✘ Должна быть сгенерирована авто-документация по компонентам Vue @cancelled(19-02-26 16:22)
    ✔ Должна собираться и запускаться из pip @done(19-03-12 16:14)
        ✔ Должна тянуть все зависимости через pip и npm - requirements.txt @done(19-03-12 16:14)
        ✔ Должна разворачиваться SQL Lite @done(19-02-26 23:39)
    ✔ Должна деплоится и работать на app-engine @done(19-03-15 16:45)
    ☐ Должен работать автодеплой внутри app-engine
    ☐ Должны быть сформулированы behave сценарии тестирования
    ☐ Работает механизм обновления модуля - pip upgrade обновляет модуль, БД конфигуриться при первом запуске через SqlAlchemy patch
        ☐ Alembic
        ☐ pip upgrade
    ☐ Работает механизм подключения плагинов
    ☐ Должны быть развернуты версии для тестирования - 
        ☐ Версия в appengine
        ☐ Версия которая собирается через pip - SQLLite
        ☐ Версия Docker с MySQL - ??
    ☐ Должны прогоняться ui тесты согласно behave сценариям по всем развернутым версиям
    ☐ Быстрая настройка рабочего места
        ☐ Инструкция по конфигурированию рабочего места
        ☐ Из гита тянем сорс, запускаем автоконфиг - тянутся все зависимости для рабочего места и все модули javascript
    ✔ WebSockets обновление грида, дека @done(19-02-26 16:23)
    ☐ Check all elements - https://github.com/harshanarayana/cookiecutter-sanic

Для каждого веб-елемента:
    ☐ Документирование 
    ☐ Для каждого ajax - on-error="..."
    ☐ Интернационализация/локализация
    ☐ Все комментарии на английском
    ☐ Покрыть UI авто-тестом

Для каждого метода в main.py:
    ☐ Заполнить самодокументирование
    ☐ Везде где есть входные переменные - проверять их наличие и значение
    ☐ Покрыть код try-catch-finaly
    ☐ Покрыть код with вместо open, close
    ☐ Все SQL запросы беруться из справочника - проверяем на SQLLite и MySQL
    ✘ Сделать unit-test @cancelled(19-02-26 23:40)

Every commit checklist:
    ☐ No errors or warnings in pylint or eslint
    ☐ Developed feature is covered by cypress test
    ☐ App engine deployed successfully
    ☐ Automated test process pass:
        ☐ All cypress tests passed localy
        ☐ All cypress tests passed on app engine

Every new version checklist:
    ☐ Locale is updated. All translations are done
    ☐ Pypi package is updated
    ☐ App engine file storage is updated
    ☐ App engine application is created from market
    ☐ Docker image is updated
    ☐ Kubernates image is updated
    ☐ e2e tests are passed on all platforms
        ☐ windows - standalone
        ☐ linux - standalone
        ☐ linux - wsgi
        ☐ app engine
        ☐ docker
        ☐ kubernate
    ☐ Version upgrade is tested
    ☐ Version rollback is tested
    ☐ New documentation is released
    ☐ After everything - automatic version incriment and Github pull request to master

==============================================================================================

Критерии работы экосистемы:
    ✔ Файловая структура - Модель, Контроллер @done(19-02-26 16:22)
    ✔ Система билда - минификация, условная загрузка @done(19-03-07 21:44)
    ✘ Должна быть сгенерирована авто-документация по методам python @cancelled(19-02-26 16:22)
    ✘ Должна быть сгенерирована авто-документация по компонентам Vue @cancelled(19-02-26 16:22)
    ✔ Должна собираться и запускаться из pip @done(19-03-12 16:14)
        ✔ Должна тянуть все зависимости через pip и npm - requirements.txt @done(19-03-12 16:14)
        ✔ Должна разворачиваться SQL Lite @done(19-02-26 23:39)
    ✔ Должна деплоится и работать на app-engine @done(19-03-15 16:45)
    ☐ Должен работать автодеплой внутри app-engine
    ☐ Должны быть сформулированы behave сценарии тестирования
    ☐ Работает механизм обновления модуля - pip upgrade обновляет модуль, БД конфигуриться при первом запуске через SqlAlchemy patch
        ☐ Alembic
        ☐ pip upgrade
    ☐ Работает механизм подключения плагинов
    ☐ Должны быть развернуты версии для тестирования - 
        ☐ Версия в appengine
        ☐ Версия которая собирается через pip - SQLLite
        ☐ Версия Docker с MySQL - ??
    ☐ Должны прогоняться ui тесты согласно behave сценариям по всем развернутым версиям
    ☐ Быстрая настройка рабочего места
        ☐ Инструкция по конфигурированию рабочего места
        ☐ Из гита тянем сорс, запускаем автоконфиг - тянутся все зависимости для рабочего места и все модули javascript
    ✔ WebSockets обновление грида, дека @done(19-02-26 16:23)
    ☐ Check all elements - https://github.com/harshanarayana/cookiecutter-sanic

Для каждого веб-елемента:
    ☐ Документирование 
    ☐ Для каждого ajax - on-error="..."
    ☐ Интернационализация/локализация
    ☐ Все комментарии на английском
    ☐ Покрыть UI авто-тестом

Для каждого метода в main.py:
    ☐ Заполнить самодокументирование
    ☐ Везде где есть входные переменные - проверять их наличие и значение
    ☐ Покрыть код try-catch-finaly
    ☐ Покрыть код with вместо open, close
    ☐ Все SQL запросы беруться из справочника - проверяем на SQLLite и MySQL
    ✘ Сделать unit-test @cancelled(19-02-26 23:40)

Every commit checklist:
    ☐ No errors or warnings in pylint or eslint
    ☐ Developed feature is covered by cypress test
    ☐ App engine deployed successfully
    ☐ Automated test process pass:
        ☐ All cypress tests passed localy
        ☐ All cypress tests passed on app engine

Every new version checklist:
    ☐ Locale is updated. All translations are done
    ☐ Pypi package is updated
    ☐ App engine file storage is updated
    ☐ App engine application is created from market
    ☐ Docker image is updated
    ☐ Kubernates image is updated
    ☐ e2e tests are passed on all platforms
        ☐ windows - standalone
        ☐ linux - standalone
        ☐ linux - wsgi
        ☐ app engine
        ☐ docker
        ☐ kubernate
    ☐ Version upgrade is tested
    ☐ Version rollback is tested
    ☐ New documentation is released
    ☐ After everything - automatic version incriment and Github pull request to master


============================================================================================




ALL AX FIELDS:
	☐ Identification
		✔ GuId @done(19-09-14 09:03)
		✔ Numeration `[COMPLEX]` @done(19-09-14 09:03)
	☐ Decoration
		☐ Header
        ☐ Text
        ☐ Icon column
        ☐ Color column
	☐ String
		✔ Simple String @done(19-09-14 09:03)
		☐ Email
	☐ Number
		✔ Integer @done(19-09-14 09:03)
		☐ Decimal
		☐ Telephone number
		☐ Slider
	☐ Boolean
		✔ Checkbox @done(19-09-14 09:03)
        ☐ Switch
        ☐ 2D radio survey
    ☐ Payment
        ☐ Paypal `[COMPLEX]`
        ☐ Stripe `[COMPLEX]`
        ☐ ... check jotforms
	☐ Relationship
		✔ 1:1 @done(19-09-14 09:03)
		✔ 1:M @done(19-09-14 09:03)
		✔ 1:M Table @done(19-09-14 09:03)
	☐ Date and Time
		☐ Date
		☐ Date Range
		☐ Date and Time
		☐ Spinner Date
	☐ List
		☐ Select
		☐ Cascade ajax select
		☐ Radio
		☐ Json Table
		☐ Tags input
	☐ Text
		✔ Simple text @done(19-09-14 09:04)
		☐ WYSIWYG
		☐ BB Code
		☐ Code highlite
		☐ Static text
	☐ Images
		☐ Filesystem Images `[COMPLEX]`
		☐ Filesystem Image Crop `[COMPLEX]`
		☐ Database Images
		☐ Database Image Crop
		☐ Google Drive Images `[COMPLEX]`
	☐ Files
		✔ Filesystem Files `[COMPLEX]` @done(19-09-14 09:05)
		☐ Database Files
		☐ Google Disk Files `[COMPLEX]`
	☐ Users
		☐ Users `[COMPLEX]`
		☐ Approval path `[COMPLEX]`
	☐ Itegration
		☐ Google Maps `[COMPLEX]`
		☐ Google SpreadSheet
		☐ Google Text
		☐ Google calendar
		☐ Youtube clip
		☐ Iframe
		☐ D3 Graph
	☐ Calculated values
		☐ Condition styling
		☐ Ajax request field `[COMPLEX]`
	☐ Object Control
		✔ Edit history (Logging) `[COMPLEX]` @done(19-09-14 09:05)
        ☐ Detailed edit history (Version control) `[COMPLEX]`
        ☐ Position drag
    ☐ Communications
        ☐ Comments
		☐ Google Comments `[COMPLEX]`